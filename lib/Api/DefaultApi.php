<?php
/**
 * DefaultApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Vgrish\YclientsOpenApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yclients
 *
 * yclients-openapi-php package for YCLIENTS generated based on the openapi schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Vgrish\YclientsOpenApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Vgrish\YclientsOpenApi\ApiException;
use Vgrish\YclientsOpenApi\Configuration;
use Vgrish\YclientsOpenApi\HeaderSelector;
use Vgrish\YclientsOpenApi\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Vgrish\YclientsOpenApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'authUser' => [
            'application/json',
        ],
        'clientCreate' => [
            'application/json',
        ],
        'clientGet' => [
            'application/json',
        ],
        'clientGetList' => [
            'application/json',
        ],
        'clientRemove' => [
            'application/json',
        ],
        'clientUpdate' => [
            'application/json',
        ],
        'companyCreate' => [
            'application/json',
        ],
        'companyGet' => [
            'application/json',
        ],
        'companyGetList' => [
            'application/json',
        ],
        'companyRemove' => [
            'application/json',
        ],
        'companyUpdate' => [
            'application/json',
        ],
        'loyaltyCardByClientIdGetList' => [
            'application/json',
        ],
        'loyaltyCardByClientPhoneGetList' => [
            'application/json',
        ],
        'loyaltyCardCreate' => [
            'application/json',
        ],
        'loyaltyCardRemove' => [
            'application/json',
        ],
        'loyaltyCardTransactionCreate' => [
            'application/json',
        ],
        'loyaltyCardTypeByChainIdGetList' => [
            'application/json',
        ],
        'loyaltyCardTypeByClientPhoneGetList' => [
            'application/json',
        ],
        'loyaltyCardTypeByCompanyIdGetList' => [
            'application/json',
        ],
        'loyaltyTransactionGetList' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex) : void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex() : int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig() : Configuration
    {
        return $this->config;
    }

    /**
     * Operation authUser
     *
     * Авторизовать пользователя
     *
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\AuthUserRequest $auth_user_request auth_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authUser'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\AuthUserResponse
     */
    public function authUser($accept, $content_type, $authorization, $auth_user_request = null, string $contentType = self::contentTypes['authUser'][0]) : \Vgrish\YclientsOpenApi\Model\AuthUserResponse
    {
        list($response) = $this->authUserWithHttpInfo($accept, $content_type, $authorization, $auth_user_request, $contentType);
        return $response;
    }

    /**
     * Operation authUserWithHttpInfo
     *
     * Авторизовать пользователя
     *
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\AuthUserRequest $auth_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authUser'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\AuthUserResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function authUserWithHttpInfo($accept, $content_type, $authorization, $auth_user_request = null, string $contentType = self::contentTypes['authUser'][0]) : array
    {
        $request = $this->authUserRequest($accept, $content_type, $authorization, $auth_user_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Vgrish\YclientsOpenApi\Model\AuthUserResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\AuthUserResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\AuthUserResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\AuthUserResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\AuthUserResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authUserAsync
     *
     * Авторизовать пользователя
     *
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\AuthUserRequest $auth_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authUserAsync($accept, $content_type, $authorization, $auth_user_request = null, string $contentType = self::contentTypes['authUser'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->authUserAsyncWithHttpInfo($accept, $content_type, $authorization, $auth_user_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authUserAsyncWithHttpInfo
     *
     * Авторизовать пользователя
     *
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\AuthUserRequest $auth_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authUserAsyncWithHttpInfo($accept, $content_type, $authorization, $auth_user_request = null, string $contentType = self::contentTypes['authUser'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\AuthUserResponse';
        $request = $this->authUserRequest($accept, $content_type, $authorization, $auth_user_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authUser'
     *
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\AuthUserRequest $auth_user_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authUserRequest($accept, $content_type, $authorization, $auth_user_request = null, string $contentType = self::contentTypes['authUser'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling authUser'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling authUser'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling authUser'
            );
        }



        $resourcePath = '/auth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($auth_user_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($auth_user_request));
            } else {
                $httpBody = $auth_user_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientCreate
     *
     * Добавить клиента
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\ClientCreateRequest $client_create_request client_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientCreate'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\ClientCreateResponse
     */
    public function clientCreate($company_id, $accept, $content_type, $authorization, $client_create_request = null, string $contentType = self::contentTypes['clientCreate'][0]) : \Vgrish\YclientsOpenApi\Model\ClientCreateResponse
    {
        list($response) = $this->clientCreateWithHttpInfo($company_id, $accept, $content_type, $authorization, $client_create_request, $contentType);
        return $response;
    }

    /**
     * Operation clientCreateWithHttpInfo
     *
     * Добавить клиента
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\ClientCreateRequest $client_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientCreate'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\ClientCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientCreateWithHttpInfo($company_id, $accept, $content_type, $authorization, $client_create_request = null, string $contentType = self::contentTypes['clientCreate'][0]) : array
    {
        $request = $this->clientCreateRequest($company_id, $accept, $content_type, $authorization, $client_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Vgrish\YclientsOpenApi\Model\ClientCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\ClientCreateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\ClientCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\ClientCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\ClientCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientCreateAsync
     *
     * Добавить клиента
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\ClientCreateRequest $client_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientCreateAsync($company_id, $accept, $content_type, $authorization, $client_create_request = null, string $contentType = self::contentTypes['clientCreate'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->clientCreateAsyncWithHttpInfo($company_id, $accept, $content_type, $authorization, $client_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientCreateAsyncWithHttpInfo
     *
     * Добавить клиента
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\ClientCreateRequest $client_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientCreateAsyncWithHttpInfo($company_id, $accept, $content_type, $authorization, $client_create_request = null, string $contentType = self::contentTypes['clientCreate'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\ClientCreateResponse';
        $request = $this->clientCreateRequest($company_id, $accept, $content_type, $authorization, $client_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientCreate'
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\ClientCreateRequest $client_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientCreateRequest($company_id, $accept, $content_type, $authorization, $client_create_request = null, string $contentType = self::contentTypes['clientCreate'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling clientCreate'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling clientCreate'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling clientCreate'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling clientCreate'
            );
        }



        $resourcePath = '/clients/{company_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($client_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($client_create_request));
            } else {
                $httpBody = $client_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientGet
     *
     * Получить клиента
     *
     * @param  int $company_id ID компании (required)
     * @param  int $id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientGet'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\ClientGetResponse
     */
    public function clientGet($company_id, $id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['clientGet'][0]) : \Vgrish\YclientsOpenApi\Model\ClientGetResponse
    {
        list($response) = $this->clientGetWithHttpInfo($company_id, $id, $accept, $content_type, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation clientGetWithHttpInfo
     *
     * Получить клиента
     *
     * @param  int $company_id ID компании (required)
     * @param  int $id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientGet'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\ClientGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientGetWithHttpInfo($company_id, $id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['clientGet'][0]) : array
    {
        $request = $this->clientGetRequest($company_id, $id, $accept, $content_type, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vgrish\YclientsOpenApi\Model\ClientGetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\ClientGetResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\ClientGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\ClientGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\ClientGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientGetAsync
     *
     * Получить клиента
     *
     * @param  int $company_id ID компании (required)
     * @param  int $id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientGetAsync($company_id, $id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['clientGet'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->clientGetAsyncWithHttpInfo($company_id, $id, $accept, $content_type, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientGetAsyncWithHttpInfo
     *
     * Получить клиента
     *
     * @param  int $company_id ID компании (required)
     * @param  int $id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientGetAsyncWithHttpInfo($company_id, $id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['clientGet'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\ClientGetResponse';
        $request = $this->clientGetRequest($company_id, $id, $accept, $content_type, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientGet'
     *
     * @param  int $company_id ID компании (required)
     * @param  int $id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientGetRequest($company_id, $id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['clientGet'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling clientGet'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling clientGet'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling clientGet'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling clientGet'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling clientGet'
            );
        }


        $resourcePath = '/client/{company_id}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientGetList
     *
     * Получить список клиентов
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\ClientGetListRequest $client_get_list_request client_get_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientGetList'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\ClientGetListResponse
     */
    public function clientGetList($company_id, $accept, $content_type, $authorization, $client_get_list_request = null, string $contentType = self::contentTypes['clientGetList'][0]) : \Vgrish\YclientsOpenApi\Model\ClientGetListResponse
    {
        list($response) = $this->clientGetListWithHttpInfo($company_id, $accept, $content_type, $authorization, $client_get_list_request, $contentType);
        return $response;
    }

    /**
     * Operation clientGetListWithHttpInfo
     *
     * Получить список клиентов
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\ClientGetListRequest $client_get_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientGetList'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\ClientGetListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientGetListWithHttpInfo($company_id, $accept, $content_type, $authorization, $client_get_list_request = null, string $contentType = self::contentTypes['clientGetList'][0]) : array
    {
        $request = $this->clientGetListRequest($company_id, $accept, $content_type, $authorization, $client_get_list_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vgrish\YclientsOpenApi\Model\ClientGetListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\ClientGetListResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\ClientGetListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\ClientGetListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\ClientGetListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientGetListAsync
     *
     * Получить список клиентов
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\ClientGetListRequest $client_get_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientGetListAsync($company_id, $accept, $content_type, $authorization, $client_get_list_request = null, string $contentType = self::contentTypes['clientGetList'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->clientGetListAsyncWithHttpInfo($company_id, $accept, $content_type, $authorization, $client_get_list_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientGetListAsyncWithHttpInfo
     *
     * Получить список клиентов
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\ClientGetListRequest $client_get_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientGetListAsyncWithHttpInfo($company_id, $accept, $content_type, $authorization, $client_get_list_request = null, string $contentType = self::contentTypes['clientGetList'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\ClientGetListResponse';
        $request = $this->clientGetListRequest($company_id, $accept, $content_type, $authorization, $client_get_list_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientGetList'
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\ClientGetListRequest $client_get_list_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientGetListRequest($company_id, $accept, $content_type, $authorization, $client_get_list_request = null, string $contentType = self::contentTypes['clientGetList'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling clientGetList'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling clientGetList'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling clientGetList'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling clientGetList'
            );
        }



        $resourcePath = '/company/{company_id}/clients/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($client_get_list_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($client_get_list_request));
            } else {
                $httpBody = $client_get_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientRemove
     *
     * Удалить клиента
     *
     * @param  int $company_id ID компании (required)
     * @param  int $id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientRemove'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function clientRemove($company_id, $id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['clientRemove'][0]) : string
    {
        list($response) = $this->clientRemoveWithHttpInfo($company_id, $id, $accept, $content_type, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation clientRemoveWithHttpInfo
     *
     * Удалить клиента
     *
     * @param  int $company_id ID компании (required)
     * @param  int $id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientRemove'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientRemoveWithHttpInfo($company_id, $id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['clientRemove'][0]) : array
    {
        $request = $this->clientRemoveRequest($company_id, $id, $accept, $content_type, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 204:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientRemoveAsync
     *
     * Удалить клиента
     *
     * @param  int $company_id ID компании (required)
     * @param  int $id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientRemoveAsync($company_id, $id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['clientRemove'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->clientRemoveAsyncWithHttpInfo($company_id, $id, $accept, $content_type, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientRemoveAsyncWithHttpInfo
     *
     * Удалить клиента
     *
     * @param  int $company_id ID компании (required)
     * @param  int $id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientRemoveAsyncWithHttpInfo($company_id, $id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['clientRemove'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = 'string';
        $request = $this->clientRemoveRequest($company_id, $id, $accept, $content_type, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientRemove'
     *
     * @param  int $company_id ID компании (required)
     * @param  int $id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientRemoveRequest($company_id, $id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['clientRemove'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling clientRemove'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling clientRemove'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling clientRemove'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling clientRemove'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling clientRemove'
            );
        }


        $resourcePath = '/client/{company_id}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientUpdate
     *
     * Редактировать клиента
     *
     * @param  int $company_id ID компании (required)
     * @param  int $id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\ClientUpdateRequest $client_update_request client_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientUpdate'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\ClientUpdateResponse
     */
    public function clientUpdate($company_id, $id, $accept, $content_type, $authorization, $client_update_request = null, string $contentType = self::contentTypes['clientUpdate'][0]) : \Vgrish\YclientsOpenApi\Model\ClientUpdateResponse
    {
        list($response) = $this->clientUpdateWithHttpInfo($company_id, $id, $accept, $content_type, $authorization, $client_update_request, $contentType);
        return $response;
    }

    /**
     * Operation clientUpdateWithHttpInfo
     *
     * Редактировать клиента
     *
     * @param  int $company_id ID компании (required)
     * @param  int $id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\ClientUpdateRequest $client_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientUpdate'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\ClientUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientUpdateWithHttpInfo($company_id, $id, $accept, $content_type, $authorization, $client_update_request = null, string $contentType = self::contentTypes['clientUpdate'][0]) : array
    {
        $request = $this->clientUpdateRequest($company_id, $id, $accept, $content_type, $authorization, $client_update_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vgrish\YclientsOpenApi\Model\ClientUpdateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\ClientUpdateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\ClientUpdateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\ClientUpdateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\ClientUpdateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientUpdateAsync
     *
     * Редактировать клиента
     *
     * @param  int $company_id ID компании (required)
     * @param  int $id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\ClientUpdateRequest $client_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientUpdateAsync($company_id, $id, $accept, $content_type, $authorization, $client_update_request = null, string $contentType = self::contentTypes['clientUpdate'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->clientUpdateAsyncWithHttpInfo($company_id, $id, $accept, $content_type, $authorization, $client_update_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientUpdateAsyncWithHttpInfo
     *
     * Редактировать клиента
     *
     * @param  int $company_id ID компании (required)
     * @param  int $id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\ClientUpdateRequest $client_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientUpdateAsyncWithHttpInfo($company_id, $id, $accept, $content_type, $authorization, $client_update_request = null, string $contentType = self::contentTypes['clientUpdate'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\ClientUpdateResponse';
        $request = $this->clientUpdateRequest($company_id, $id, $accept, $content_type, $authorization, $client_update_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientUpdate'
     *
     * @param  int $company_id ID компании (required)
     * @param  int $id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\ClientUpdateRequest $client_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clientUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientUpdateRequest($company_id, $id, $accept, $content_type, $authorization, $client_update_request = null, string $contentType = self::contentTypes['clientUpdate'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling clientUpdate'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling clientUpdate'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling clientUpdate'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling clientUpdate'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling clientUpdate'
            );
        }



        $resourcePath = '/client/{company_id}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($client_update_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($client_update_request));
            } else {
                $httpBody = $client_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companyCreate
     *
     * Создать компанию
     *
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\CompanyCreateRequest $company_create_request company_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyCreate'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\CompanyCreateResponse
     */
    public function companyCreate($accept, $content_type, $authorization, $company_create_request = null, string $contentType = self::contentTypes['companyCreate'][0]) : \Vgrish\YclientsOpenApi\Model\CompanyCreateResponse
    {
        list($response) = $this->companyCreateWithHttpInfo($accept, $content_type, $authorization, $company_create_request, $contentType);
        return $response;
    }

    /**
     * Operation companyCreateWithHttpInfo
     *
     * Создать компанию
     *
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\CompanyCreateRequest $company_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyCreate'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\CompanyCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyCreateWithHttpInfo($accept, $content_type, $authorization, $company_create_request = null, string $contentType = self::contentTypes['companyCreate'][0]) : array
    {
        $request = $this->companyCreateRequest($accept, $content_type, $authorization, $company_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Vgrish\YclientsOpenApi\Model\CompanyCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\CompanyCreateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\CompanyCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\CompanyCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\CompanyCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companyCreateAsync
     *
     * Создать компанию
     *
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\CompanyCreateRequest $company_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyCreateAsync($accept, $content_type, $authorization, $company_create_request = null, string $contentType = self::contentTypes['companyCreate'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->companyCreateAsyncWithHttpInfo($accept, $content_type, $authorization, $company_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companyCreateAsyncWithHttpInfo
     *
     * Создать компанию
     *
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\CompanyCreateRequest $company_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyCreateAsyncWithHttpInfo($accept, $content_type, $authorization, $company_create_request = null, string $contentType = self::contentTypes['companyCreate'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\CompanyCreateResponse';
        $request = $this->companyCreateRequest($accept, $content_type, $authorization, $company_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companyCreate'
     *
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\CompanyCreateRequest $company_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companyCreateRequest($accept, $content_type, $authorization, $company_create_request = null, string $contentType = self::contentTypes['companyCreate'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling companyCreate'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling companyCreate'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling companyCreate'
            );
        }



        $resourcePath = '/companies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($company_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($company_create_request));
            } else {
                $httpBody = $company_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companyGet
     *
     * Получить компанию
     *
     * @param  float $id Идентификатор компании, информацию о которой нужно получить. (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  float $my Только для авторизованного пользователя. Если нужны дополнительные данные по компании, на управление которой пользователь имеет права (optional)
     * @param  float $for_booking Показать дату и время ближайшего свободного сеанса в компании (ISO8601). (optional)
     * @param  float $show_groups Включить в объект компании список сетей в которые входит эта компания (optional)
     * @param  float $show_bookforms Показать виджеты онлайн-записи компании (optional)
     * @param  float $bookform_id Показать адрес виджета онлайн-записи с указанным идентификатором (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyGet'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\CompanyGetResponse
     */
    public function companyGet($id, $accept, $content_type, $authorization, $my = null, $for_booking = null, $show_groups = null, $show_bookforms = null, $bookform_id = null, string $contentType = self::contentTypes['companyGet'][0]) : \Vgrish\YclientsOpenApi\Model\CompanyGetResponse
    {
        list($response) = $this->companyGetWithHttpInfo($id, $accept, $content_type, $authorization, $my, $for_booking, $show_groups, $show_bookforms, $bookform_id, $contentType);
        return $response;
    }

    /**
     * Operation companyGetWithHttpInfo
     *
     * Получить компанию
     *
     * @param  float $id Идентификатор компании, информацию о которой нужно получить. (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  float $my Только для авторизованного пользователя. Если нужны дополнительные данные по компании, на управление которой пользователь имеет права (optional)
     * @param  float $for_booking Показать дату и время ближайшего свободного сеанса в компании (ISO8601). (optional)
     * @param  float $show_groups Включить в объект компании список сетей в которые входит эта компания (optional)
     * @param  float $show_bookforms Показать виджеты онлайн-записи компании (optional)
     * @param  float $bookform_id Показать адрес виджета онлайн-записи с указанным идентификатором (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyGet'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\CompanyGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyGetWithHttpInfo($id, $accept, $content_type, $authorization, $my = null, $for_booking = null, $show_groups = null, $show_bookforms = null, $bookform_id = null, string $contentType = self::contentTypes['companyGet'][0]) : array
    {
        $request = $this->companyGetRequest($id, $accept, $content_type, $authorization, $my, $for_booking, $show_groups, $show_bookforms, $bookform_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vgrish\YclientsOpenApi\Model\CompanyGetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\CompanyGetResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\CompanyGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\CompanyGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\CompanyGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companyGetAsync
     *
     * Получить компанию
     *
     * @param  float $id Идентификатор компании, информацию о которой нужно получить. (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  float $my Только для авторизованного пользователя. Если нужны дополнительные данные по компании, на управление которой пользователь имеет права (optional)
     * @param  float $for_booking Показать дату и время ближайшего свободного сеанса в компании (ISO8601). (optional)
     * @param  float $show_groups Включить в объект компании список сетей в которые входит эта компания (optional)
     * @param  float $show_bookforms Показать виджеты онлайн-записи компании (optional)
     * @param  float $bookform_id Показать адрес виджета онлайн-записи с указанным идентификатором (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyGetAsync($id, $accept, $content_type, $authorization, $my = null, $for_booking = null, $show_groups = null, $show_bookforms = null, $bookform_id = null, string $contentType = self::contentTypes['companyGet'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->companyGetAsyncWithHttpInfo($id, $accept, $content_type, $authorization, $my, $for_booking, $show_groups, $show_bookforms, $bookform_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companyGetAsyncWithHttpInfo
     *
     * Получить компанию
     *
     * @param  float $id Идентификатор компании, информацию о которой нужно получить. (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  float $my Только для авторизованного пользователя. Если нужны дополнительные данные по компании, на управление которой пользователь имеет права (optional)
     * @param  float $for_booking Показать дату и время ближайшего свободного сеанса в компании (ISO8601). (optional)
     * @param  float $show_groups Включить в объект компании список сетей в которые входит эта компания (optional)
     * @param  float $show_bookforms Показать виджеты онлайн-записи компании (optional)
     * @param  float $bookform_id Показать адрес виджета онлайн-записи с указанным идентификатором (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyGetAsyncWithHttpInfo($id, $accept, $content_type, $authorization, $my = null, $for_booking = null, $show_groups = null, $show_bookforms = null, $bookform_id = null, string $contentType = self::contentTypes['companyGet'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\CompanyGetResponse';
        $request = $this->companyGetRequest($id, $accept, $content_type, $authorization, $my, $for_booking, $show_groups, $show_bookforms, $bookform_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companyGet'
     *
     * @param  float $id Идентификатор компании, информацию о которой нужно получить. (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  float $my Только для авторизованного пользователя. Если нужны дополнительные данные по компании, на управление которой пользователь имеет права (optional)
     * @param  float $for_booking Показать дату и время ближайшего свободного сеанса в компании (ISO8601). (optional)
     * @param  float $show_groups Включить в объект компании список сетей в которые входит эта компания (optional)
     * @param  float $show_bookforms Показать виджеты онлайн-записи компании (optional)
     * @param  float $bookform_id Показать адрес виджета онлайн-записи с указанным идентификатором (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companyGetRequest($id, $accept, $content_type, $authorization, $my = null, $for_booking = null, $show_groups = null, $show_bookforms = null, $bookform_id = null, string $contentType = self::contentTypes['companyGet'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling companyGet'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling companyGet'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling companyGet'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling companyGet'
            );
        }







        $resourcePath = '/company/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $my,
            'my', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $for_booking,
            'forBooking', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_groups,
            'show_groups', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_bookforms,
            'showBookforms', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bookform_id,
            'bookform_id', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companyGetList
     *
     * Получить список компаний
     *
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  float $id ID компании. Фильтр по идентификатору компании (optional)
     * @param  float $group_id ID сети компаний. Фильтр по идентификатору сети компаний _Default: 83_ (optional)
     * @param  float $my Только для авторизованного пользователя. Если нужно компании, на управление которыми пользователь имеет права (optional)
     * @param  float $active Если нужно получить только компании с активной лицензией и доступным бронированием (optional)
     * @param  float $moderated Если нужно получить только прошедшие модерацию компании, чей контент проверен для публикации (optional)
     * @param  float $for_booking Показать дату и время ближайшего свободного сеанса в компании (ISO8601) (optional)
     * @param  float $show_groups Включить в объект компании список сетей в которые входит эта компания (optional)
     * @param  float $city_id Поиск по ID города ([метод получения городов](#cities)) (optional)
     * @param  float $show_bookforms Включить в объект компании виджеты онлайн-записи (optional)
     * @param  float $vk_api_id Поиск виджеты онлайн-записи по vk_api_id. Параметр работает при showBookforms&#x3D;1 (optional)
     * @param  float $min_id Минимальный ID компании (optional)
     * @param  float $show_deleted Включить в список удалённые компании (optional)
     * @param  float $hide_record_type_single Не показывать салоны с индивидуальной записью (optional)
     * @param  float $hide_record_type_activity Не показывать салоны с групповой записью (optional)
     * @param  float $hide_record_type_mixed Не показывать салоны со смешанной записью (optional)
     * @param  float $business_group_id Идентификатор группы бизнеса. Фильтр по группе бизнеса (optional)
     * @param  float $business_type_id Идентификатор сферы бизнеса. Фильтр по сфере бизнеса (optional)
     * @param  float $yandex Фильтр по синхронизации данных компании с партнерскими площадкам (optional)
     * @param  string[] $include Включить в объект компании дополнительные данные (optional)
     * @param  float $count Количество компаний на странице (optional)
     * @param  float $page Номер страницы (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyGetList'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\CompanyGetListResponse
     */
    public function companyGetList($accept, $content_type, $authorization, $id = null, $group_id = null, $my = null, $active = null, $moderated = null, $for_booking = null, $show_groups = null, $city_id = null, $show_bookforms = null, $vk_api_id = null, $min_id = null, $show_deleted = null, $hide_record_type_single = null, $hide_record_type_activity = null, $hide_record_type_mixed = null, $business_group_id = null, $business_type_id = null, $yandex = null, $include = null, $count = null, $page = null, string $contentType = self::contentTypes['companyGetList'][0]) : \Vgrish\YclientsOpenApi\Model\CompanyGetListResponse
    {
        list($response) = $this->companyGetListWithHttpInfo($accept, $content_type, $authorization, $id, $group_id, $my, $active, $moderated, $for_booking, $show_groups, $city_id, $show_bookforms, $vk_api_id, $min_id, $show_deleted, $hide_record_type_single, $hide_record_type_activity, $hide_record_type_mixed, $business_group_id, $business_type_id, $yandex, $include, $count, $page, $contentType);
        return $response;
    }

    /**
     * Operation companyGetListWithHttpInfo
     *
     * Получить список компаний
     *
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  float $id ID компании. Фильтр по идентификатору компании (optional)
     * @param  float $group_id ID сети компаний. Фильтр по идентификатору сети компаний _Default: 83_ (optional)
     * @param  float $my Только для авторизованного пользователя. Если нужно компании, на управление которыми пользователь имеет права (optional)
     * @param  float $active Если нужно получить только компании с активной лицензией и доступным бронированием (optional)
     * @param  float $moderated Если нужно получить только прошедшие модерацию компании, чей контент проверен для публикации (optional)
     * @param  float $for_booking Показать дату и время ближайшего свободного сеанса в компании (ISO8601) (optional)
     * @param  float $show_groups Включить в объект компании список сетей в которые входит эта компания (optional)
     * @param  float $city_id Поиск по ID города ([метод получения городов](#cities)) (optional)
     * @param  float $show_bookforms Включить в объект компании виджеты онлайн-записи (optional)
     * @param  float $vk_api_id Поиск виджеты онлайн-записи по vk_api_id. Параметр работает при showBookforms&#x3D;1 (optional)
     * @param  float $min_id Минимальный ID компании (optional)
     * @param  float $show_deleted Включить в список удалённые компании (optional)
     * @param  float $hide_record_type_single Не показывать салоны с индивидуальной записью (optional)
     * @param  float $hide_record_type_activity Не показывать салоны с групповой записью (optional)
     * @param  float $hide_record_type_mixed Не показывать салоны со смешанной записью (optional)
     * @param  float $business_group_id Идентификатор группы бизнеса. Фильтр по группе бизнеса (optional)
     * @param  float $business_type_id Идентификатор сферы бизнеса. Фильтр по сфере бизнеса (optional)
     * @param  float $yandex Фильтр по синхронизации данных компании с партнерскими площадкам (optional)
     * @param  string[] $include Включить в объект компании дополнительные данные (optional)
     * @param  float $count Количество компаний на странице (optional)
     * @param  float $page Номер страницы (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyGetList'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\CompanyGetListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyGetListWithHttpInfo($accept, $content_type, $authorization, $id = null, $group_id = null, $my = null, $active = null, $moderated = null, $for_booking = null, $show_groups = null, $city_id = null, $show_bookforms = null, $vk_api_id = null, $min_id = null, $show_deleted = null, $hide_record_type_single = null, $hide_record_type_activity = null, $hide_record_type_mixed = null, $business_group_id = null, $business_type_id = null, $yandex = null, $include = null, $count = null, $page = null, string $contentType = self::contentTypes['companyGetList'][0]) : array
    {
        $request = $this->companyGetListRequest($accept, $content_type, $authorization, $id, $group_id, $my, $active, $moderated, $for_booking, $show_groups, $city_id, $show_bookforms, $vk_api_id, $min_id, $show_deleted, $hide_record_type_single, $hide_record_type_activity, $hide_record_type_mixed, $business_group_id, $business_type_id, $yandex, $include, $count, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vgrish\YclientsOpenApi\Model\CompanyGetListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\CompanyGetListResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\CompanyGetListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\CompanyGetListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\CompanyGetListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companyGetListAsync
     *
     * Получить список компаний
     *
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  float $id ID компании. Фильтр по идентификатору компании (optional)
     * @param  float $group_id ID сети компаний. Фильтр по идентификатору сети компаний _Default: 83_ (optional)
     * @param  float $my Только для авторизованного пользователя. Если нужно компании, на управление которыми пользователь имеет права (optional)
     * @param  float $active Если нужно получить только компании с активной лицензией и доступным бронированием (optional)
     * @param  float $moderated Если нужно получить только прошедшие модерацию компании, чей контент проверен для публикации (optional)
     * @param  float $for_booking Показать дату и время ближайшего свободного сеанса в компании (ISO8601) (optional)
     * @param  float $show_groups Включить в объект компании список сетей в которые входит эта компания (optional)
     * @param  float $city_id Поиск по ID города ([метод получения городов](#cities)) (optional)
     * @param  float $show_bookforms Включить в объект компании виджеты онлайн-записи (optional)
     * @param  float $vk_api_id Поиск виджеты онлайн-записи по vk_api_id. Параметр работает при showBookforms&#x3D;1 (optional)
     * @param  float $min_id Минимальный ID компании (optional)
     * @param  float $show_deleted Включить в список удалённые компании (optional)
     * @param  float $hide_record_type_single Не показывать салоны с индивидуальной записью (optional)
     * @param  float $hide_record_type_activity Не показывать салоны с групповой записью (optional)
     * @param  float $hide_record_type_mixed Не показывать салоны со смешанной записью (optional)
     * @param  float $business_group_id Идентификатор группы бизнеса. Фильтр по группе бизнеса (optional)
     * @param  float $business_type_id Идентификатор сферы бизнеса. Фильтр по сфере бизнеса (optional)
     * @param  float $yandex Фильтр по синхронизации данных компании с партнерскими площадкам (optional)
     * @param  string[] $include Включить в объект компании дополнительные данные (optional)
     * @param  float $count Количество компаний на странице (optional)
     * @param  float $page Номер страницы (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyGetListAsync($accept, $content_type, $authorization, $id = null, $group_id = null, $my = null, $active = null, $moderated = null, $for_booking = null, $show_groups = null, $city_id = null, $show_bookforms = null, $vk_api_id = null, $min_id = null, $show_deleted = null, $hide_record_type_single = null, $hide_record_type_activity = null, $hide_record_type_mixed = null, $business_group_id = null, $business_type_id = null, $yandex = null, $include = null, $count = null, $page = null, string $contentType = self::contentTypes['companyGetList'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->companyGetListAsyncWithHttpInfo($accept, $content_type, $authorization, $id, $group_id, $my, $active, $moderated, $for_booking, $show_groups, $city_id, $show_bookforms, $vk_api_id, $min_id, $show_deleted, $hide_record_type_single, $hide_record_type_activity, $hide_record_type_mixed, $business_group_id, $business_type_id, $yandex, $include, $count, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companyGetListAsyncWithHttpInfo
     *
     * Получить список компаний
     *
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  float $id ID компании. Фильтр по идентификатору компании (optional)
     * @param  float $group_id ID сети компаний. Фильтр по идентификатору сети компаний _Default: 83_ (optional)
     * @param  float $my Только для авторизованного пользователя. Если нужно компании, на управление которыми пользователь имеет права (optional)
     * @param  float $active Если нужно получить только компании с активной лицензией и доступным бронированием (optional)
     * @param  float $moderated Если нужно получить только прошедшие модерацию компании, чей контент проверен для публикации (optional)
     * @param  float $for_booking Показать дату и время ближайшего свободного сеанса в компании (ISO8601) (optional)
     * @param  float $show_groups Включить в объект компании список сетей в которые входит эта компания (optional)
     * @param  float $city_id Поиск по ID города ([метод получения городов](#cities)) (optional)
     * @param  float $show_bookforms Включить в объект компании виджеты онлайн-записи (optional)
     * @param  float $vk_api_id Поиск виджеты онлайн-записи по vk_api_id. Параметр работает при showBookforms&#x3D;1 (optional)
     * @param  float $min_id Минимальный ID компании (optional)
     * @param  float $show_deleted Включить в список удалённые компании (optional)
     * @param  float $hide_record_type_single Не показывать салоны с индивидуальной записью (optional)
     * @param  float $hide_record_type_activity Не показывать салоны с групповой записью (optional)
     * @param  float $hide_record_type_mixed Не показывать салоны со смешанной записью (optional)
     * @param  float $business_group_id Идентификатор группы бизнеса. Фильтр по группе бизнеса (optional)
     * @param  float $business_type_id Идентификатор сферы бизнеса. Фильтр по сфере бизнеса (optional)
     * @param  float $yandex Фильтр по синхронизации данных компании с партнерскими площадкам (optional)
     * @param  string[] $include Включить в объект компании дополнительные данные (optional)
     * @param  float $count Количество компаний на странице (optional)
     * @param  float $page Номер страницы (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyGetListAsyncWithHttpInfo($accept, $content_type, $authorization, $id = null, $group_id = null, $my = null, $active = null, $moderated = null, $for_booking = null, $show_groups = null, $city_id = null, $show_bookforms = null, $vk_api_id = null, $min_id = null, $show_deleted = null, $hide_record_type_single = null, $hide_record_type_activity = null, $hide_record_type_mixed = null, $business_group_id = null, $business_type_id = null, $yandex = null, $include = null, $count = null, $page = null, string $contentType = self::contentTypes['companyGetList'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\CompanyGetListResponse';
        $request = $this->companyGetListRequest($accept, $content_type, $authorization, $id, $group_id, $my, $active, $moderated, $for_booking, $show_groups, $city_id, $show_bookforms, $vk_api_id, $min_id, $show_deleted, $hide_record_type_single, $hide_record_type_activity, $hide_record_type_mixed, $business_group_id, $business_type_id, $yandex, $include, $count, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companyGetList'
     *
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  float $id ID компании. Фильтр по идентификатору компании (optional)
     * @param  float $group_id ID сети компаний. Фильтр по идентификатору сети компаний _Default: 83_ (optional)
     * @param  float $my Только для авторизованного пользователя. Если нужно компании, на управление которыми пользователь имеет права (optional)
     * @param  float $active Если нужно получить только компании с активной лицензией и доступным бронированием (optional)
     * @param  float $moderated Если нужно получить только прошедшие модерацию компании, чей контент проверен для публикации (optional)
     * @param  float $for_booking Показать дату и время ближайшего свободного сеанса в компании (ISO8601) (optional)
     * @param  float $show_groups Включить в объект компании список сетей в которые входит эта компания (optional)
     * @param  float $city_id Поиск по ID города ([метод получения городов](#cities)) (optional)
     * @param  float $show_bookforms Включить в объект компании виджеты онлайн-записи (optional)
     * @param  float $vk_api_id Поиск виджеты онлайн-записи по vk_api_id. Параметр работает при showBookforms&#x3D;1 (optional)
     * @param  float $min_id Минимальный ID компании (optional)
     * @param  float $show_deleted Включить в список удалённые компании (optional)
     * @param  float $hide_record_type_single Не показывать салоны с индивидуальной записью (optional)
     * @param  float $hide_record_type_activity Не показывать салоны с групповой записью (optional)
     * @param  float $hide_record_type_mixed Не показывать салоны со смешанной записью (optional)
     * @param  float $business_group_id Идентификатор группы бизнеса. Фильтр по группе бизнеса (optional)
     * @param  float $business_type_id Идентификатор сферы бизнеса. Фильтр по сфере бизнеса (optional)
     * @param  float $yandex Фильтр по синхронизации данных компании с партнерскими площадкам (optional)
     * @param  string[] $include Включить в объект компании дополнительные данные (optional)
     * @param  float $count Количество компаний на странице (optional)
     * @param  float $page Номер страницы (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companyGetListRequest($accept, $content_type, $authorization, $id = null, $group_id = null, $my = null, $active = null, $moderated = null, $for_booking = null, $show_groups = null, $city_id = null, $show_bookforms = null, $vk_api_id = null, $min_id = null, $show_deleted = null, $hide_record_type_single = null, $hide_record_type_activity = null, $hide_record_type_mixed = null, $business_group_id = null, $business_type_id = null, $yandex = null, $include = null, $count = null, $page = null, string $contentType = self::contentTypes['companyGetList'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling companyGetList'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling companyGetList'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling companyGetList'
            );
        }























        $resourcePath = '/companies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $group_id,
            'group_id', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $my,
            'my', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $active,
            'active', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $moderated,
            'moderated', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $for_booking,
            'forBooking', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_groups,
            'show_groups', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $city_id,
            'city_id', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_bookforms,
            'showBookforms', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $vk_api_id,
            'vk_api_id', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_id,
            'min_id', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_deleted,
            'show_deleted', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hide_record_type_single,
            'hide_record_type_single', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hide_record_type_activity,
            'hide_record_type_activity', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hide_record_type_mixed,
            'hide_record_type_mixed', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $business_group_id,
            'business_group_id', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $business_type_id,
            'business_type_id', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $yandex,
            'yandex', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companyRemove
     *
     * Удалить компанию
     *
     * @param  int $id Идентификатор компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyRemove'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function companyRemove($id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['companyRemove'][0]) : string
    {
        list($response) = $this->companyRemoveWithHttpInfo($id, $accept, $content_type, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation companyRemoveWithHttpInfo
     *
     * Удалить компанию
     *
     * @param  int $id Идентификатор компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyRemove'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyRemoveWithHttpInfo($id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['companyRemove'][0]) : array
    {
        $request = $this->companyRemoveRequest($id, $accept, $content_type, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companyRemoveAsync
     *
     * Удалить компанию
     *
     * @param  int $id Идентификатор компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyRemoveAsync($id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['companyRemove'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->companyRemoveAsyncWithHttpInfo($id, $accept, $content_type, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companyRemoveAsyncWithHttpInfo
     *
     * Удалить компанию
     *
     * @param  int $id Идентификатор компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyRemoveAsyncWithHttpInfo($id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['companyRemove'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = 'string';
        $request = $this->companyRemoveRequest($id, $accept, $content_type, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companyRemove'
     *
     * @param  int $id Идентификатор компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companyRemoveRequest($id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['companyRemove'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling companyRemove'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling companyRemove'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling companyRemove'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling companyRemove'
            );
        }


        $resourcePath = '/company/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companyUpdate
     *
     * Изменить компанию
     *
     * @param  int $id Идентификатор компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  map[string,object] $request_body request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyUpdate'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\CompanyUpdateResponse
     */
    public function companyUpdate($id, $accept, $content_type, $authorization, $request_body = null, string $contentType = self::contentTypes['companyUpdate'][0]) : \Vgrish\YclientsOpenApi\Model\CompanyUpdateResponse
    {
        list($response) = $this->companyUpdateWithHttpInfo($id, $accept, $content_type, $authorization, $request_body, $contentType);
        return $response;
    }

    /**
     * Operation companyUpdateWithHttpInfo
     *
     * Изменить компанию
     *
     * @param  int $id Идентификатор компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  map[string,object] $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyUpdate'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\CompanyUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyUpdateWithHttpInfo($id, $accept, $content_type, $authorization, $request_body = null, string $contentType = self::contentTypes['companyUpdate'][0]) : array
    {
        $request = $this->companyUpdateRequest($id, $accept, $content_type, $authorization, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vgrish\YclientsOpenApi\Model\CompanyUpdateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\CompanyUpdateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\CompanyUpdateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\CompanyUpdateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\CompanyUpdateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companyUpdateAsync
     *
     * Изменить компанию
     *
     * @param  int $id Идентификатор компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  map[string,object] $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyUpdateAsync($id, $accept, $content_type, $authorization, $request_body = null, string $contentType = self::contentTypes['companyUpdate'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->companyUpdateAsyncWithHttpInfo($id, $accept, $content_type, $authorization, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companyUpdateAsyncWithHttpInfo
     *
     * Изменить компанию
     *
     * @param  int $id Идентификатор компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  map[string,object] $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyUpdateAsyncWithHttpInfo($id, $accept, $content_type, $authorization, $request_body = null, string $contentType = self::contentTypes['companyUpdate'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\CompanyUpdateResponse';
        $request = $this->companyUpdateRequest($id, $accept, $content_type, $authorization, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companyUpdate'
     *
     * @param  int $id Идентификатор компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  map[string,object] $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['companyUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function companyUpdateRequest($id, $accept, $content_type, $authorization, $request_body = null, string $contentType = self::contentTypes['companyUpdate'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling companyUpdate'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling companyUpdate'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling companyUpdate'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling companyUpdate'
            );
        }



        $resourcePath = '/company/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation loyaltyCardByClientIdGetList
     *
     * Получить список карт клиента по ID
     *
     * @param  int $client_id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardByClientIdGetList'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\LoyaltyCardByClientIdGetListResponse
     */
    public function loyaltyCardByClientIdGetList($client_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardByClientIdGetList'][0]) : \Vgrish\YclientsOpenApi\Model\LoyaltyCardByClientIdGetListResponse
    {
        list($response) = $this->loyaltyCardByClientIdGetListWithHttpInfo($client_id, $accept, $content_type, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation loyaltyCardByClientIdGetListWithHttpInfo
     *
     * Получить список карт клиента по ID
     *
     * @param  int $client_id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardByClientIdGetList'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\LoyaltyCardByClientIdGetListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function loyaltyCardByClientIdGetListWithHttpInfo($client_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardByClientIdGetList'][0]) : array
    {
        $request = $this->loyaltyCardByClientIdGetListRequest($client_id, $accept, $content_type, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vgrish\YclientsOpenApi\Model\LoyaltyCardByClientIdGetListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\LoyaltyCardByClientIdGetListResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\LoyaltyCardByClientIdGetListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\LoyaltyCardByClientIdGetListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\LoyaltyCardByClientIdGetListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation loyaltyCardByClientIdGetListAsync
     *
     * Получить список карт клиента по ID
     *
     * @param  int $client_id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardByClientIdGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loyaltyCardByClientIdGetListAsync($client_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardByClientIdGetList'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->loyaltyCardByClientIdGetListAsyncWithHttpInfo($client_id, $accept, $content_type, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loyaltyCardByClientIdGetListAsyncWithHttpInfo
     *
     * Получить список карт клиента по ID
     *
     * @param  int $client_id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardByClientIdGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loyaltyCardByClientIdGetListAsyncWithHttpInfo($client_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardByClientIdGetList'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\LoyaltyCardByClientIdGetListResponse';
        $request = $this->loyaltyCardByClientIdGetListRequest($client_id, $accept, $content_type, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'loyaltyCardByClientIdGetList'
     *
     * @param  int $client_id ID клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardByClientIdGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loyaltyCardByClientIdGetListRequest($client_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardByClientIdGetList'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling loyaltyCardByClientIdGetList'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling loyaltyCardByClientIdGetList'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling loyaltyCardByClientIdGetList'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling loyaltyCardByClientIdGetList'
            );
        }


        $resourcePath = '/loyalty/client_cards/{client_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client_id' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation loyaltyCardByClientPhoneGetList
     *
     * Получить список карт клиента по номеру телефона
     *
     * @param  string $phone Номер телефона клиента в формате 70001234567 (required)
     * @param  int $chain_id ID сети (required)
     * @param  int $company_id ID филиала (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardByClientPhoneGetList'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\LoyaltyCardByClientPhoneGetListResponse
     */
    public function loyaltyCardByClientPhoneGetList($phone, $chain_id, $company_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardByClientPhoneGetList'][0]) : \Vgrish\YclientsOpenApi\Model\LoyaltyCardByClientPhoneGetListResponse
    {
        list($response) = $this->loyaltyCardByClientPhoneGetListWithHttpInfo($phone, $chain_id, $company_id, $accept, $content_type, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation loyaltyCardByClientPhoneGetListWithHttpInfo
     *
     * Получить список карт клиента по номеру телефона
     *
     * @param  string $phone Номер телефона клиента в формате 70001234567 (required)
     * @param  int $chain_id ID сети (required)
     * @param  int $company_id ID филиала (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardByClientPhoneGetList'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\LoyaltyCardByClientPhoneGetListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function loyaltyCardByClientPhoneGetListWithHttpInfo($phone, $chain_id, $company_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardByClientPhoneGetList'][0]) : array
    {
        $request = $this->loyaltyCardByClientPhoneGetListRequest($phone, $chain_id, $company_id, $accept, $content_type, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vgrish\YclientsOpenApi\Model\LoyaltyCardByClientPhoneGetListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\LoyaltyCardByClientPhoneGetListResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\LoyaltyCardByClientPhoneGetListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\LoyaltyCardByClientPhoneGetListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\LoyaltyCardByClientPhoneGetListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation loyaltyCardByClientPhoneGetListAsync
     *
     * Получить список карт клиента по номеру телефона
     *
     * @param  string $phone Номер телефона клиента в формате 70001234567 (required)
     * @param  int $chain_id ID сети (required)
     * @param  int $company_id ID филиала (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardByClientPhoneGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loyaltyCardByClientPhoneGetListAsync($phone, $chain_id, $company_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardByClientPhoneGetList'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->loyaltyCardByClientPhoneGetListAsyncWithHttpInfo($phone, $chain_id, $company_id, $accept, $content_type, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loyaltyCardByClientPhoneGetListAsyncWithHttpInfo
     *
     * Получить список карт клиента по номеру телефона
     *
     * @param  string $phone Номер телефона клиента в формате 70001234567 (required)
     * @param  int $chain_id ID сети (required)
     * @param  int $company_id ID филиала (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardByClientPhoneGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loyaltyCardByClientPhoneGetListAsyncWithHttpInfo($phone, $chain_id, $company_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardByClientPhoneGetList'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\LoyaltyCardByClientPhoneGetListResponse';
        $request = $this->loyaltyCardByClientPhoneGetListRequest($phone, $chain_id, $company_id, $accept, $content_type, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'loyaltyCardByClientPhoneGetList'
     *
     * @param  string $phone Номер телефона клиента в формате 70001234567 (required)
     * @param  int $chain_id ID сети (required)
     * @param  int $company_id ID филиала (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardByClientPhoneGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loyaltyCardByClientPhoneGetListRequest($phone, $chain_id, $company_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardByClientPhoneGetList'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'phone' is set
        if ($phone === null || (is_array($phone) && count($phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone when calling loyaltyCardByClientPhoneGetList'
            );
        }

        // verify the required parameter 'chain_id' is set
        if ($chain_id === null || (is_array($chain_id) && count($chain_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chain_id when calling loyaltyCardByClientPhoneGetList'
            );
        }

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling loyaltyCardByClientPhoneGetList'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling loyaltyCardByClientPhoneGetList'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling loyaltyCardByClientPhoneGetList'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling loyaltyCardByClientPhoneGetList'
            );
        }


        $resourcePath = '/loyalty/cards/{phone}/{chain_id}/{company_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($phone !== null) {
            $resourcePath = str_replace(
                '{' . 'phone' . '}',
                ObjectSerializer::toPathValue($phone),
                $resourcePath
            );
        }
        // path params
        if ($chain_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chain_id' . '}',
                ObjectSerializer::toPathValue($chain_id),
                $resourcePath
            );
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation loyaltyCardCreate
     *
     * Выдать карту лояльности
     *
     * @param  int $company_id ID филиала (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\LoyaltyCardCreateRequest $loyalty_card_create_request loyalty_card_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardCreate'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\LoyaltyCardCreateResponse
     */
    public function loyaltyCardCreate($company_id, $accept, $content_type, $authorization, $loyalty_card_create_request = null, string $contentType = self::contentTypes['loyaltyCardCreate'][0]) : \Vgrish\YclientsOpenApi\Model\LoyaltyCardCreateResponse
    {
        list($response) = $this->loyaltyCardCreateWithHttpInfo($company_id, $accept, $content_type, $authorization, $loyalty_card_create_request, $contentType);
        return $response;
    }

    /**
     * Operation loyaltyCardCreateWithHttpInfo
     *
     * Выдать карту лояльности
     *
     * @param  int $company_id ID филиала (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\LoyaltyCardCreateRequest $loyalty_card_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardCreate'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\LoyaltyCardCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function loyaltyCardCreateWithHttpInfo($company_id, $accept, $content_type, $authorization, $loyalty_card_create_request = null, string $contentType = self::contentTypes['loyaltyCardCreate'][0]) : array
    {
        $request = $this->loyaltyCardCreateRequest($company_id, $accept, $content_type, $authorization, $loyalty_card_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vgrish\YclientsOpenApi\Model\LoyaltyCardCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\LoyaltyCardCreateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\LoyaltyCardCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\LoyaltyCardCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\LoyaltyCardCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation loyaltyCardCreateAsync
     *
     * Выдать карту лояльности
     *
     * @param  int $company_id ID филиала (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\LoyaltyCardCreateRequest $loyalty_card_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loyaltyCardCreateAsync($company_id, $accept, $content_type, $authorization, $loyalty_card_create_request = null, string $contentType = self::contentTypes['loyaltyCardCreate'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->loyaltyCardCreateAsyncWithHttpInfo($company_id, $accept, $content_type, $authorization, $loyalty_card_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loyaltyCardCreateAsyncWithHttpInfo
     *
     * Выдать карту лояльности
     *
     * @param  int $company_id ID филиала (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\LoyaltyCardCreateRequest $loyalty_card_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loyaltyCardCreateAsyncWithHttpInfo($company_id, $accept, $content_type, $authorization, $loyalty_card_create_request = null, string $contentType = self::contentTypes['loyaltyCardCreate'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\LoyaltyCardCreateResponse';
        $request = $this->loyaltyCardCreateRequest($company_id, $accept, $content_type, $authorization, $loyalty_card_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'loyaltyCardCreate'
     *
     * @param  int $company_id ID филиала (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\LoyaltyCardCreateRequest $loyalty_card_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loyaltyCardCreateRequest($company_id, $accept, $content_type, $authorization, $loyalty_card_create_request = null, string $contentType = self::contentTypes['loyaltyCardCreate'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling loyaltyCardCreate'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling loyaltyCardCreate'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling loyaltyCardCreate'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling loyaltyCardCreate'
            );
        }



        $resourcePath = '/loyalty/cards/{company_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($loyalty_card_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($loyalty_card_create_request));
            } else {
                $httpBody = $loyalty_card_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation loyaltyCardRemove
     *
     * Удалить карту  лояльности
     *
     * @param  int $company_id ID филиала (required)
     * @param  int $card_id ID карты лояльности (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardRemove'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function loyaltyCardRemove($company_id, $card_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardRemove'][0]) : object
    {
        list($response) = $this->loyaltyCardRemoveWithHttpInfo($company_id, $card_id, $accept, $content_type, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation loyaltyCardRemoveWithHttpInfo
     *
     * Удалить карту  лояльности
     *
     * @param  int $company_id ID филиала (required)
     * @param  int $card_id ID карты лояльности (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardRemove'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function loyaltyCardRemoveWithHttpInfo($company_id, $card_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardRemove'][0]) : array
    {
        $request = $this->loyaltyCardRemoveRequest($company_id, $card_id, $accept, $content_type, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 204:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation loyaltyCardRemoveAsync
     *
     * Удалить карту  лояльности
     *
     * @param  int $company_id ID филиала (required)
     * @param  int $card_id ID карты лояльности (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loyaltyCardRemoveAsync($company_id, $card_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardRemove'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->loyaltyCardRemoveAsyncWithHttpInfo($company_id, $card_id, $accept, $content_type, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loyaltyCardRemoveAsyncWithHttpInfo
     *
     * Удалить карту  лояльности
     *
     * @param  int $company_id ID филиала (required)
     * @param  int $card_id ID карты лояльности (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loyaltyCardRemoveAsyncWithHttpInfo($company_id, $card_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardRemove'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = 'object';
        $request = $this->loyaltyCardRemoveRequest($company_id, $card_id, $accept, $content_type, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'loyaltyCardRemove'
     *
     * @param  int $company_id ID филиала (required)
     * @param  int $card_id ID карты лояльности (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loyaltyCardRemoveRequest($company_id, $card_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardRemove'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling loyaltyCardRemove'
            );
        }

        // verify the required parameter 'card_id' is set
        if ($card_id === null || (is_array($card_id) && count($card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_id when calling loyaltyCardRemove'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling loyaltyCardRemove'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling loyaltyCardRemove'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling loyaltyCardRemove'
            );
        }


        $resourcePath = '/loyalty/cards/{company_id}/{card_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'card_id' . '}',
                ObjectSerializer::toPathValue($card_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation loyaltyCardTransactionCreate
     *
     * Ручное списание/пополнение карты лояльности в компании
     *
     * @param  int $company_id Идентификатор филиала. (required)
     * @param  int $card_id ID карты лояльности (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\LoyaltyTransactionCreateRequest $loyalty_transaction_create_request loyalty_transaction_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTransactionCreate'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\LoyaltyCardTransactionCreateResponse
     */
    public function loyaltyCardTransactionCreate($company_id, $card_id, $accept, $content_type, $authorization, $loyalty_transaction_create_request = null, string $contentType = self::contentTypes['loyaltyCardTransactionCreate'][0]) : \Vgrish\YclientsOpenApi\Model\LoyaltyCardTransactionCreateResponse
    {
        list($response) = $this->loyaltyCardTransactionCreateWithHttpInfo($company_id, $card_id, $accept, $content_type, $authorization, $loyalty_transaction_create_request, $contentType);
        return $response;
    }

    /**
     * Operation loyaltyCardTransactionCreateWithHttpInfo
     *
     * Ручное списание/пополнение карты лояльности в компании
     *
     * @param  int $company_id Идентификатор филиала. (required)
     * @param  int $card_id ID карты лояльности (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\LoyaltyTransactionCreateRequest $loyalty_transaction_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTransactionCreate'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\LoyaltyCardTransactionCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function loyaltyCardTransactionCreateWithHttpInfo($company_id, $card_id, $accept, $content_type, $authorization, $loyalty_transaction_create_request = null, string $contentType = self::contentTypes['loyaltyCardTransactionCreate'][0]) : array
    {
        $request = $this->loyaltyCardTransactionCreateRequest($company_id, $card_id, $accept, $content_type, $authorization, $loyalty_transaction_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vgrish\YclientsOpenApi\Model\LoyaltyCardTransactionCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\LoyaltyCardTransactionCreateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\LoyaltyCardTransactionCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\LoyaltyCardTransactionCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\LoyaltyCardTransactionCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation loyaltyCardTransactionCreateAsync
     *
     * Ручное списание/пополнение карты лояльности в компании
     *
     * @param  int $company_id Идентификатор филиала. (required)
     * @param  int $card_id ID карты лояльности (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\LoyaltyTransactionCreateRequest $loyalty_transaction_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTransactionCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loyaltyCardTransactionCreateAsync($company_id, $card_id, $accept, $content_type, $authorization, $loyalty_transaction_create_request = null, string $contentType = self::contentTypes['loyaltyCardTransactionCreate'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->loyaltyCardTransactionCreateAsyncWithHttpInfo($company_id, $card_id, $accept, $content_type, $authorization, $loyalty_transaction_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loyaltyCardTransactionCreateAsyncWithHttpInfo
     *
     * Ручное списание/пополнение карты лояльности в компании
     *
     * @param  int $company_id Идентификатор филиала. (required)
     * @param  int $card_id ID карты лояльности (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\LoyaltyTransactionCreateRequest $loyalty_transaction_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTransactionCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loyaltyCardTransactionCreateAsyncWithHttpInfo($company_id, $card_id, $accept, $content_type, $authorization, $loyalty_transaction_create_request = null, string $contentType = self::contentTypes['loyaltyCardTransactionCreate'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\LoyaltyCardTransactionCreateResponse';
        $request = $this->loyaltyCardTransactionCreateRequest($company_id, $card_id, $accept, $content_type, $authorization, $loyalty_transaction_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'loyaltyCardTransactionCreate'
     *
     * @param  int $company_id Идентификатор филиала. (required)
     * @param  int $card_id ID карты лояльности (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\LoyaltyTransactionCreateRequest $loyalty_transaction_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTransactionCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loyaltyCardTransactionCreateRequest($company_id, $card_id, $accept, $content_type, $authorization, $loyalty_transaction_create_request = null, string $contentType = self::contentTypes['loyaltyCardTransactionCreate'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling loyaltyCardTransactionCreate'
            );
        }

        // verify the required parameter 'card_id' is set
        if ($card_id === null || (is_array($card_id) && count($card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_id when calling loyaltyCardTransactionCreate'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling loyaltyCardTransactionCreate'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling loyaltyCardTransactionCreate'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling loyaltyCardTransactionCreate'
            );
        }



        $resourcePath = '/company/{company_id}/loyalty/cards/{card_id}/manual_transaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'card_id' . '}',
                ObjectSerializer::toPathValue($card_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($loyalty_transaction_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($loyalty_transaction_create_request));
            } else {
                $httpBody = $loyalty_transaction_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation loyaltyCardTypeByChainIdGetList
     *
     * Получить список типов карт, доступных в сети
     *
     * @param  int $chain_id Идентификатор сети (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTypeByChainIdGetList'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByChainIdGetListResponse
     */
    public function loyaltyCardTypeByChainIdGetList($chain_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardTypeByChainIdGetList'][0]) : \Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByChainIdGetListResponse
    {
        list($response) = $this->loyaltyCardTypeByChainIdGetListWithHttpInfo($chain_id, $accept, $content_type, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation loyaltyCardTypeByChainIdGetListWithHttpInfo
     *
     * Получить список типов карт, доступных в сети
     *
     * @param  int $chain_id Идентификатор сети (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTypeByChainIdGetList'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByChainIdGetListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function loyaltyCardTypeByChainIdGetListWithHttpInfo($chain_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardTypeByChainIdGetList'][0]) : array
    {
        $request = $this->loyaltyCardTypeByChainIdGetListRequest($chain_id, $accept, $content_type, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByChainIdGetListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByChainIdGetListResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByChainIdGetListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByChainIdGetListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByChainIdGetListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation loyaltyCardTypeByChainIdGetListAsync
     *
     * Получить список типов карт, доступных в сети
     *
     * @param  int $chain_id Идентификатор сети (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTypeByChainIdGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loyaltyCardTypeByChainIdGetListAsync($chain_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardTypeByChainIdGetList'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->loyaltyCardTypeByChainIdGetListAsyncWithHttpInfo($chain_id, $accept, $content_type, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loyaltyCardTypeByChainIdGetListAsyncWithHttpInfo
     *
     * Получить список типов карт, доступных в сети
     *
     * @param  int $chain_id Идентификатор сети (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTypeByChainIdGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loyaltyCardTypeByChainIdGetListAsyncWithHttpInfo($chain_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardTypeByChainIdGetList'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByChainIdGetListResponse';
        $request = $this->loyaltyCardTypeByChainIdGetListRequest($chain_id, $accept, $content_type, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'loyaltyCardTypeByChainIdGetList'
     *
     * @param  int $chain_id Идентификатор сети (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTypeByChainIdGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loyaltyCardTypeByChainIdGetListRequest($chain_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardTypeByChainIdGetList'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'chain_id' is set
        if ($chain_id === null || (is_array($chain_id) && count($chain_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chain_id when calling loyaltyCardTypeByChainIdGetList'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling loyaltyCardTypeByChainIdGetList'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling loyaltyCardTypeByChainIdGetList'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling loyaltyCardTypeByChainIdGetList'
            );
        }


        $resourcePath = '/chain/{chain_id}/loyalty/card_types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($chain_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chain_id' . '}',
                ObjectSerializer::toPathValue($chain_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation loyaltyCardTypeByClientPhoneGetList
     *
     * Получить список типов карт доступных для выдачи клиенту
     *
     * @param  int $company_id ID компании (required)
     * @param  string $phone Номер телефона клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTypeByClientPhoneGetList'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByClientPhoneGetListResponse
     */
    public function loyaltyCardTypeByClientPhoneGetList($company_id, $phone, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardTypeByClientPhoneGetList'][0]) : \Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByClientPhoneGetListResponse
    {
        list($response) = $this->loyaltyCardTypeByClientPhoneGetListWithHttpInfo($company_id, $phone, $accept, $content_type, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation loyaltyCardTypeByClientPhoneGetListWithHttpInfo
     *
     * Получить список типов карт доступных для выдачи клиенту
     *
     * @param  int $company_id ID компании (required)
     * @param  string $phone Номер телефона клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTypeByClientPhoneGetList'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByClientPhoneGetListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function loyaltyCardTypeByClientPhoneGetListWithHttpInfo($company_id, $phone, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardTypeByClientPhoneGetList'][0]) : array
    {
        $request = $this->loyaltyCardTypeByClientPhoneGetListRequest($company_id, $phone, $accept, $content_type, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByClientPhoneGetListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByClientPhoneGetListResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByClientPhoneGetListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByClientPhoneGetListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByClientPhoneGetListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation loyaltyCardTypeByClientPhoneGetListAsync
     *
     * Получить список типов карт доступных для выдачи клиенту
     *
     * @param  int $company_id ID компании (required)
     * @param  string $phone Номер телефона клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTypeByClientPhoneGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loyaltyCardTypeByClientPhoneGetListAsync($company_id, $phone, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardTypeByClientPhoneGetList'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->loyaltyCardTypeByClientPhoneGetListAsyncWithHttpInfo($company_id, $phone, $accept, $content_type, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loyaltyCardTypeByClientPhoneGetListAsyncWithHttpInfo
     *
     * Получить список типов карт доступных для выдачи клиенту
     *
     * @param  int $company_id ID компании (required)
     * @param  string $phone Номер телефона клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTypeByClientPhoneGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loyaltyCardTypeByClientPhoneGetListAsyncWithHttpInfo($company_id, $phone, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardTypeByClientPhoneGetList'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByClientPhoneGetListResponse';
        $request = $this->loyaltyCardTypeByClientPhoneGetListRequest($company_id, $phone, $accept, $content_type, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'loyaltyCardTypeByClientPhoneGetList'
     *
     * @param  int $company_id ID компании (required)
     * @param  string $phone Номер телефона клиента (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTypeByClientPhoneGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loyaltyCardTypeByClientPhoneGetListRequest($company_id, $phone, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardTypeByClientPhoneGetList'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling loyaltyCardTypeByClientPhoneGetList'
            );
        }

        // verify the required parameter 'phone' is set
        if ($phone === null || (is_array($phone) && count($phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone when calling loyaltyCardTypeByClientPhoneGetList'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling loyaltyCardTypeByClientPhoneGetList'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling loyaltyCardTypeByClientPhoneGetList'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling loyaltyCardTypeByClientPhoneGetList'
            );
        }


        $resourcePath = '/loyalty/card_types/client/{company_id}/{phone}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($phone !== null) {
            $resourcePath = str_replace(
                '{' . 'phone' . '}',
                ObjectSerializer::toPathValue($phone),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation loyaltyCardTypeByCompanyIdGetList
     *
     * Получить список типов карт доступных в филиале
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTypeByCompanyIdGetList'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByCompanyIdGetListResponse
     */
    public function loyaltyCardTypeByCompanyIdGetList($company_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardTypeByCompanyIdGetList'][0]) : \Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByCompanyIdGetListResponse
    {
        list($response) = $this->loyaltyCardTypeByCompanyIdGetListWithHttpInfo($company_id, $accept, $content_type, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation loyaltyCardTypeByCompanyIdGetListWithHttpInfo
     *
     * Получить список типов карт доступных в филиале
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTypeByCompanyIdGetList'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByCompanyIdGetListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function loyaltyCardTypeByCompanyIdGetListWithHttpInfo($company_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardTypeByCompanyIdGetList'][0]) : array
    {
        $request = $this->loyaltyCardTypeByCompanyIdGetListRequest($company_id, $accept, $content_type, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByCompanyIdGetListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByCompanyIdGetListResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByCompanyIdGetListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByCompanyIdGetListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByCompanyIdGetListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation loyaltyCardTypeByCompanyIdGetListAsync
     *
     * Получить список типов карт доступных в филиале
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTypeByCompanyIdGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loyaltyCardTypeByCompanyIdGetListAsync($company_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardTypeByCompanyIdGetList'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->loyaltyCardTypeByCompanyIdGetListAsyncWithHttpInfo($company_id, $accept, $content_type, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loyaltyCardTypeByCompanyIdGetListAsyncWithHttpInfo
     *
     * Получить список типов карт доступных в филиале
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTypeByCompanyIdGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loyaltyCardTypeByCompanyIdGetListAsyncWithHttpInfo($company_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardTypeByCompanyIdGetList'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\LoyaltyCardTypeByCompanyIdGetListResponse';
        $request = $this->loyaltyCardTypeByCompanyIdGetListRequest($company_id, $accept, $content_type, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'loyaltyCardTypeByCompanyIdGetList'
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyCardTypeByCompanyIdGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loyaltyCardTypeByCompanyIdGetListRequest($company_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['loyaltyCardTypeByCompanyIdGetList'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling loyaltyCardTypeByCompanyIdGetList'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling loyaltyCardTypeByCompanyIdGetList'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling loyaltyCardTypeByCompanyIdGetList'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling loyaltyCardTypeByCompanyIdGetList'
            );
        }


        $resourcePath = '/loyalty/card_types/salon/{company_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation loyaltyTransactionGetList
     *
     * Получить список транзакций лояльности в сети
     *
     * @param  int $chain_id Идентификатор сети (required)
     * @param  \DateTime $created_after Дата начала выборки в формате Y-m-d (required)
     * @param  \DateTime $created_before Дата окончания выборки в формате Y-m-d (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string[] $types Типы транзакций лояльности, включенные в выборку: 1 - Скидка по акции, 2 - Начисление по программе лояльности, 3 - Списание с карты лояльности, 4 - Начисление по реферальной программе, 5 - Ручное пополнение, 6 - Ручное списание, 7 - Списание просроченных баллов, 8 - Списание с сертификата, 9 - Использование абонемента, 10 - Перерасчет стоимости по абонементу, 11 - Списание с личного счета (optional)
     * @param  int[] $company_ids Идентификаторы филиалов транзакций лояльности, включенные в выборку (optional)
     * @param  int[] $visit_ids Идентификаторы визитов транзакций лояльности, включенные в выборку (optional)
     * @param  int $page Страница выборки (optional)
     * @param  int $count Количество результатов на одной странице выборки (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTransactionGetList'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\LoyaltyTransactionGetListResponse
     */
    public function loyaltyTransactionGetList($chain_id, $created_after, $created_before, $accept, $content_type, $authorization, $types = null, $company_ids = null, $visit_ids = null, $page = null, $count = null, string $contentType = self::contentTypes['loyaltyTransactionGetList'][0]) : \Vgrish\YclientsOpenApi\Model\LoyaltyTransactionGetListResponse
    {
        list($response) = $this->loyaltyTransactionGetListWithHttpInfo($chain_id, $created_after, $created_before, $accept, $content_type, $authorization, $types, $company_ids, $visit_ids, $page, $count, $contentType);
        return $response;
    }

    /**
     * Operation loyaltyTransactionGetListWithHttpInfo
     *
     * Получить список транзакций лояльности в сети
     *
     * @param  int $chain_id Идентификатор сети (required)
     * @param  \DateTime $created_after Дата начала выборки в формате Y-m-d (required)
     * @param  \DateTime $created_before Дата окончания выборки в формате Y-m-d (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string[] $types Типы транзакций лояльности, включенные в выборку: 1 - Скидка по акции, 2 - Начисление по программе лояльности, 3 - Списание с карты лояльности, 4 - Начисление по реферальной программе, 5 - Ручное пополнение, 6 - Ручное списание, 7 - Списание просроченных баллов, 8 - Списание с сертификата, 9 - Использование абонемента, 10 - Перерасчет стоимости по абонементу, 11 - Списание с личного счета (optional)
     * @param  int[] $company_ids Идентификаторы филиалов транзакций лояльности, включенные в выборку (optional)
     * @param  int[] $visit_ids Идентификаторы визитов транзакций лояльности, включенные в выборку (optional)
     * @param  int $page Страница выборки (optional)
     * @param  int $count Количество результатов на одной странице выборки (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTransactionGetList'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\LoyaltyTransactionGetListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function loyaltyTransactionGetListWithHttpInfo($chain_id, $created_after, $created_before, $accept, $content_type, $authorization, $types = null, $company_ids = null, $visit_ids = null, $page = null, $count = null, string $contentType = self::contentTypes['loyaltyTransactionGetList'][0]) : array
    {
        $request = $this->loyaltyTransactionGetListRequest($chain_id, $created_after, $created_before, $accept, $content_type, $authorization, $types, $company_ids, $visit_ids, $page, $count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vgrish\YclientsOpenApi\Model\LoyaltyTransactionGetListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\LoyaltyTransactionGetListResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\LoyaltyTransactionGetListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\LoyaltyTransactionGetListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\LoyaltyTransactionGetListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation loyaltyTransactionGetListAsync
     *
     * Получить список транзакций лояльности в сети
     *
     * @param  int $chain_id Идентификатор сети (required)
     * @param  \DateTime $created_after Дата начала выборки в формате Y-m-d (required)
     * @param  \DateTime $created_before Дата окончания выборки в формате Y-m-d (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string[] $types Типы транзакций лояльности, включенные в выборку: 1 - Скидка по акции, 2 - Начисление по программе лояльности, 3 - Списание с карты лояльности, 4 - Начисление по реферальной программе, 5 - Ручное пополнение, 6 - Ручное списание, 7 - Списание просроченных баллов, 8 - Списание с сертификата, 9 - Использование абонемента, 10 - Перерасчет стоимости по абонементу, 11 - Списание с личного счета (optional)
     * @param  int[] $company_ids Идентификаторы филиалов транзакций лояльности, включенные в выборку (optional)
     * @param  int[] $visit_ids Идентификаторы визитов транзакций лояльности, включенные в выборку (optional)
     * @param  int $page Страница выборки (optional)
     * @param  int $count Количество результатов на одной странице выборки (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTransactionGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loyaltyTransactionGetListAsync($chain_id, $created_after, $created_before, $accept, $content_type, $authorization, $types = null, $company_ids = null, $visit_ids = null, $page = null, $count = null, string $contentType = self::contentTypes['loyaltyTransactionGetList'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->loyaltyTransactionGetListAsyncWithHttpInfo($chain_id, $created_after, $created_before, $accept, $content_type, $authorization, $types, $company_ids, $visit_ids, $page, $count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loyaltyTransactionGetListAsyncWithHttpInfo
     *
     * Получить список транзакций лояльности в сети
     *
     * @param  int $chain_id Идентификатор сети (required)
     * @param  \DateTime $created_after Дата начала выборки в формате Y-m-d (required)
     * @param  \DateTime $created_before Дата окончания выборки в формате Y-m-d (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string[] $types Типы транзакций лояльности, включенные в выборку: 1 - Скидка по акции, 2 - Начисление по программе лояльности, 3 - Списание с карты лояльности, 4 - Начисление по реферальной программе, 5 - Ручное пополнение, 6 - Ручное списание, 7 - Списание просроченных баллов, 8 - Списание с сертификата, 9 - Использование абонемента, 10 - Перерасчет стоимости по абонементу, 11 - Списание с личного счета (optional)
     * @param  int[] $company_ids Идентификаторы филиалов транзакций лояльности, включенные в выборку (optional)
     * @param  int[] $visit_ids Идентификаторы визитов транзакций лояльности, включенные в выборку (optional)
     * @param  int $page Страница выборки (optional)
     * @param  int $count Количество результатов на одной странице выборки (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTransactionGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loyaltyTransactionGetListAsyncWithHttpInfo($chain_id, $created_after, $created_before, $accept, $content_type, $authorization, $types = null, $company_ids = null, $visit_ids = null, $page = null, $count = null, string $contentType = self::contentTypes['loyaltyTransactionGetList'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\LoyaltyTransactionGetListResponse';
        $request = $this->loyaltyTransactionGetListRequest($chain_id, $created_after, $created_before, $accept, $content_type, $authorization, $types, $company_ids, $visit_ids, $page, $count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'loyaltyTransactionGetList'
     *
     * @param  int $chain_id Идентификатор сети (required)
     * @param  \DateTime $created_after Дата начала выборки в формате Y-m-d (required)
     * @param  \DateTime $created_before Дата окончания выборки в формате Y-m-d (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string[] $types Типы транзакций лояльности, включенные в выборку: 1 - Скидка по акции, 2 - Начисление по программе лояльности, 3 - Списание с карты лояльности, 4 - Начисление по реферальной программе, 5 - Ручное пополнение, 6 - Ручное списание, 7 - Списание просроченных баллов, 8 - Списание с сертификата, 9 - Использование абонемента, 10 - Перерасчет стоимости по абонементу, 11 - Списание с личного счета (optional)
     * @param  int[] $company_ids Идентификаторы филиалов транзакций лояльности, включенные в выборку (optional)
     * @param  int[] $visit_ids Идентификаторы визитов транзакций лояльности, включенные в выборку (optional)
     * @param  int $page Страница выборки (optional)
     * @param  int $count Количество результатов на одной странице выборки (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loyaltyTransactionGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loyaltyTransactionGetListRequest($chain_id, $created_after, $created_before, $accept, $content_type, $authorization, $types = null, $company_ids = null, $visit_ids = null, $page = null, $count = null, string $contentType = self::contentTypes['loyaltyTransactionGetList'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'chain_id' is set
        if ($chain_id === null || (is_array($chain_id) && count($chain_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chain_id when calling loyaltyTransactionGetList'
            );
        }

        // verify the required parameter 'created_after' is set
        if ($created_after === null || (is_array($created_after) && count($created_after) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $created_after when calling loyaltyTransactionGetList'
            );
        }

        // verify the required parameter 'created_before' is set
        if ($created_before === null || (is_array($created_before) && count($created_before) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $created_before when calling loyaltyTransactionGetList'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling loyaltyTransactionGetList'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling loyaltyTransactionGetList'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling loyaltyTransactionGetList'
            );
        }







        $resourcePath = '/chain/{chain_id}/loyalty/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_after,
            'created_after', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_before,
            'created_before', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $types,
            'types', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $company_ids,
            'company_ids', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $visit_ids,
            'visit_ids', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($chain_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chain_id' . '}',
                ObjectSerializer::toPathValue($chain_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption() : array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
