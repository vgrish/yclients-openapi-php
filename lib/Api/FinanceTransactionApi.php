<?php
/**
 * FinanceTransactionApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Vgrish\YclientsOpenApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yclients
 *
 * yclients-openapi-php package for YCLIENTS generated based on the openapi schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Vgrish\YclientsOpenApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Vgrish\YclientsOpenApi\ApiException;
use Vgrish\YclientsOpenApi\Configuration;
use Vgrish\YclientsOpenApi\HeaderSelector;
use Vgrish\YclientsOpenApi\ObjectSerializer;

/**
 * FinanceTransactionApi Class Doc Comment
 *
 * @category Class
 * @package  Vgrish\YclientsOpenApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FinanceTransactionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'financeTransactionByVisitOrRecordGet' => [
            'application/json',
        ],
        'financeTransactionCreate' => [
            'application/json',
        ],
        'financeTransactionGet' => [
            'application/json',
        ],
        'financeTransactionGetList' => [
            'application/json',
        ],
        'financeTransactionRemove' => [
            'application/json',
        ],
        'financeTransactionUpdate' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex) : void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex() : int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig() : Configuration
    {
        return $this->config;
    }

    /**
     * Operation financeTransactionByVisitOrRecordGet
     *
     * Получение транзакций по ID визита или записи
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  int $record_id ID записи (optional)
     * @param  int $visit_id ID визита (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionByVisitOrRecordGet'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\FinanceTransactionByVisitOrRecordGetResponse
     */
    public function financeTransactionByVisitOrRecordGet($company_id, $accept, $content_type, $authorization, $record_id = null, $visit_id = null, string $contentType = self::contentTypes['financeTransactionByVisitOrRecordGet'][0]) : \Vgrish\YclientsOpenApi\Model\FinanceTransactionByVisitOrRecordGetResponse
    {
        list($response) = $this->financeTransactionByVisitOrRecordGetWithHttpInfo($company_id, $accept, $content_type, $authorization, $record_id, $visit_id, $contentType);
        return $response;
    }

    /**
     * Operation financeTransactionByVisitOrRecordGetWithHttpInfo
     *
     * Получение транзакций по ID визита или записи
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  int $record_id ID записи (optional)
     * @param  int $visit_id ID визита (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionByVisitOrRecordGet'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\FinanceTransactionByVisitOrRecordGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function financeTransactionByVisitOrRecordGetWithHttpInfo($company_id, $accept, $content_type, $authorization, $record_id = null, $visit_id = null, string $contentType = self::contentTypes['financeTransactionByVisitOrRecordGet'][0]) : array
    {
        $request = $this->financeTransactionByVisitOrRecordGetRequest($company_id, $accept, $content_type, $authorization, $record_id, $visit_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vgrish\YclientsOpenApi\Model\FinanceTransactionByVisitOrRecordGetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\FinanceTransactionByVisitOrRecordGetResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\FinanceTransactionByVisitOrRecordGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\FinanceTransactionByVisitOrRecordGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\FinanceTransactionByVisitOrRecordGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation financeTransactionByVisitOrRecordGetAsync
     *
     * Получение транзакций по ID визита или записи
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  int $record_id ID записи (optional)
     * @param  int $visit_id ID визита (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionByVisitOrRecordGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function financeTransactionByVisitOrRecordGetAsync($company_id, $accept, $content_type, $authorization, $record_id = null, $visit_id = null, string $contentType = self::contentTypes['financeTransactionByVisitOrRecordGet'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->financeTransactionByVisitOrRecordGetAsyncWithHttpInfo($company_id, $accept, $content_type, $authorization, $record_id, $visit_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation financeTransactionByVisitOrRecordGetAsyncWithHttpInfo
     *
     * Получение транзакций по ID визита или записи
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  int $record_id ID записи (optional)
     * @param  int $visit_id ID визита (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionByVisitOrRecordGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function financeTransactionByVisitOrRecordGetAsyncWithHttpInfo($company_id, $accept, $content_type, $authorization, $record_id = null, $visit_id = null, string $contentType = self::contentTypes['financeTransactionByVisitOrRecordGet'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\FinanceTransactionByVisitOrRecordGetResponse';
        $request = $this->financeTransactionByVisitOrRecordGetRequest($company_id, $accept, $content_type, $authorization, $record_id, $visit_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'financeTransactionByVisitOrRecordGet'
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  int $record_id ID записи (optional)
     * @param  int $visit_id ID визита (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionByVisitOrRecordGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function financeTransactionByVisitOrRecordGetRequest($company_id, $accept, $content_type, $authorization, $record_id = null, $visit_id = null, string $contentType = self::contentTypes['financeTransactionByVisitOrRecordGet'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling financeTransactionByVisitOrRecordGet'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling financeTransactionByVisitOrRecordGet'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling financeTransactionByVisitOrRecordGet'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling financeTransactionByVisitOrRecordGet'
            );
        }




        $resourcePath = '/timetable/transactions/{company_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $record_id,
            'record_id', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $visit_id,
            'visit_id', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation financeTransactionCreate
     *
     * Создание финансовой транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\FinanceTransactionCreateRequest $finance_transaction_create_request finance_transaction_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionCreate'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\FinanceTransactionCreateResponse
     */
    public function financeTransactionCreate($company_id, $accept, $content_type, $authorization, $finance_transaction_create_request = null, string $contentType = self::contentTypes['financeTransactionCreate'][0]) : \Vgrish\YclientsOpenApi\Model\FinanceTransactionCreateResponse
    {
        list($response) = $this->financeTransactionCreateWithHttpInfo($company_id, $accept, $content_type, $authorization, $finance_transaction_create_request, $contentType);
        return $response;
    }

    /**
     * Operation financeTransactionCreateWithHttpInfo
     *
     * Создание финансовой транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\FinanceTransactionCreateRequest $finance_transaction_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionCreate'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\FinanceTransactionCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function financeTransactionCreateWithHttpInfo($company_id, $accept, $content_type, $authorization, $finance_transaction_create_request = null, string $contentType = self::contentTypes['financeTransactionCreate'][0]) : array
    {
        $request = $this->financeTransactionCreateRequest($company_id, $accept, $content_type, $authorization, $finance_transaction_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vgrish\YclientsOpenApi\Model\FinanceTransactionCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\FinanceTransactionCreateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\FinanceTransactionCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\FinanceTransactionCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\FinanceTransactionCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation financeTransactionCreateAsync
     *
     * Создание финансовой транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\FinanceTransactionCreateRequest $finance_transaction_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function financeTransactionCreateAsync($company_id, $accept, $content_type, $authorization, $finance_transaction_create_request = null, string $contentType = self::contentTypes['financeTransactionCreate'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->financeTransactionCreateAsyncWithHttpInfo($company_id, $accept, $content_type, $authorization, $finance_transaction_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation financeTransactionCreateAsyncWithHttpInfo
     *
     * Создание финансовой транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\FinanceTransactionCreateRequest $finance_transaction_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function financeTransactionCreateAsyncWithHttpInfo($company_id, $accept, $content_type, $authorization, $finance_transaction_create_request = null, string $contentType = self::contentTypes['financeTransactionCreate'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\FinanceTransactionCreateResponse';
        $request = $this->financeTransactionCreateRequest($company_id, $accept, $content_type, $authorization, $finance_transaction_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'financeTransactionCreate'
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\FinanceTransactionCreateRequest $finance_transaction_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function financeTransactionCreateRequest($company_id, $accept, $content_type, $authorization, $finance_transaction_create_request = null, string $contentType = self::contentTypes['financeTransactionCreate'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling financeTransactionCreate'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling financeTransactionCreate'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling financeTransactionCreate'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling financeTransactionCreate'
            );
        }



        $resourcePath = '/finance_transactions/{company_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($finance_transaction_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($finance_transaction_create_request));
            } else {
                $httpBody = $finance_transaction_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation financeTransactionGet
     *
     * Получение финансовой транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  int $transaction_id ID транзакции (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionGet'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\FinanceTransactionGetResponse
     */
    public function financeTransactionGet($company_id, $transaction_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['financeTransactionGet'][0]) : \Vgrish\YclientsOpenApi\Model\FinanceTransactionGetResponse
    {
        list($response) = $this->financeTransactionGetWithHttpInfo($company_id, $transaction_id, $accept, $content_type, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation financeTransactionGetWithHttpInfo
     *
     * Получение финансовой транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  int $transaction_id ID транзакции (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionGet'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\FinanceTransactionGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function financeTransactionGetWithHttpInfo($company_id, $transaction_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['financeTransactionGet'][0]) : array
    {
        $request = $this->financeTransactionGetRequest($company_id, $transaction_id, $accept, $content_type, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vgrish\YclientsOpenApi\Model\FinanceTransactionGetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\FinanceTransactionGetResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\FinanceTransactionGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\FinanceTransactionGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\FinanceTransactionGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation financeTransactionGetAsync
     *
     * Получение финансовой транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  int $transaction_id ID транзакции (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function financeTransactionGetAsync($company_id, $transaction_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['financeTransactionGet'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->financeTransactionGetAsyncWithHttpInfo($company_id, $transaction_id, $accept, $content_type, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation financeTransactionGetAsyncWithHttpInfo
     *
     * Получение финансовой транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  int $transaction_id ID транзакции (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function financeTransactionGetAsyncWithHttpInfo($company_id, $transaction_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['financeTransactionGet'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\FinanceTransactionGetResponse';
        $request = $this->financeTransactionGetRequest($company_id, $transaction_id, $accept, $content_type, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'financeTransactionGet'
     *
     * @param  int $company_id ID компании (required)
     * @param  int $transaction_id ID транзакции (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function financeTransactionGetRequest($company_id, $transaction_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['financeTransactionGet'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling financeTransactionGet'
            );
        }

        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling financeTransactionGet'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling financeTransactionGet'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling financeTransactionGet'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling financeTransactionGet'
            );
        }


        $resourcePath = '/finance_transactions/{company_id}/{transaction_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transaction_id' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation financeTransactionGetList
     *
     * Получить транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  int $page Номер страницы (optional)
     * @param  int $count Количество клиентов на странице (optional)
     * @param  int $account_id ID кассы (optional)
     * @param  int $supplier_id ID контрагента (optional)
     * @param  int $client_id ID клиента (optional)
     * @param  int $user_id ID пользователя (optional)
     * @param  int $master_id ID сотрудника (optional)
     * @param  int $type тип транзакции (optional)
     * @param  int $real_money транзакция реальными деньгами (optional)
     * @param  int $deleted была ли удалена транзакция (optional)
     * @param  string $start_date дата начала периода (optional)
     * @param  string $end_date дата окончания периода (optional)
     * @param  int $balance_is 0 - любой баланс, 1 - положительный, 2 - оттрицательный (optional)
     * @param  int $document_id идентификатор документа (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionGetList'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\FinanceTransactionGetListResponse
     */
    public function financeTransactionGetList($company_id, $accept, $content_type, $authorization, $page = null, $count = null, $account_id = null, $supplier_id = null, $client_id = null, $user_id = null, $master_id = null, $type = null, $real_money = null, $deleted = null, $start_date = null, $end_date = null, $balance_is = null, $document_id = null, string $contentType = self::contentTypes['financeTransactionGetList'][0]) : \Vgrish\YclientsOpenApi\Model\FinanceTransactionGetListResponse
    {
        list($response) = $this->financeTransactionGetListWithHttpInfo($company_id, $accept, $content_type, $authorization, $page, $count, $account_id, $supplier_id, $client_id, $user_id, $master_id, $type, $real_money, $deleted, $start_date, $end_date, $balance_is, $document_id, $contentType);
        return $response;
    }

    /**
     * Operation financeTransactionGetListWithHttpInfo
     *
     * Получить транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  int $page Номер страницы (optional)
     * @param  int $count Количество клиентов на странице (optional)
     * @param  int $account_id ID кассы (optional)
     * @param  int $supplier_id ID контрагента (optional)
     * @param  int $client_id ID клиента (optional)
     * @param  int $user_id ID пользователя (optional)
     * @param  int $master_id ID сотрудника (optional)
     * @param  int $type тип транзакции (optional)
     * @param  int $real_money транзакция реальными деньгами (optional)
     * @param  int $deleted была ли удалена транзакция (optional)
     * @param  string $start_date дата начала периода (optional)
     * @param  string $end_date дата окончания периода (optional)
     * @param  int $balance_is 0 - любой баланс, 1 - положительный, 2 - оттрицательный (optional)
     * @param  int $document_id идентификатор документа (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionGetList'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\FinanceTransactionGetListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function financeTransactionGetListWithHttpInfo($company_id, $accept, $content_type, $authorization, $page = null, $count = null, $account_id = null, $supplier_id = null, $client_id = null, $user_id = null, $master_id = null, $type = null, $real_money = null, $deleted = null, $start_date = null, $end_date = null, $balance_is = null, $document_id = null, string $contentType = self::contentTypes['financeTransactionGetList'][0]) : array
    {
        $request = $this->financeTransactionGetListRequest($company_id, $accept, $content_type, $authorization, $page, $count, $account_id, $supplier_id, $client_id, $user_id, $master_id, $type, $real_money, $deleted, $start_date, $end_date, $balance_is, $document_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vgrish\YclientsOpenApi\Model\FinanceTransactionGetListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\FinanceTransactionGetListResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\FinanceTransactionGetListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\FinanceTransactionGetListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\FinanceTransactionGetListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation financeTransactionGetListAsync
     *
     * Получить транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  int $page Номер страницы (optional)
     * @param  int $count Количество клиентов на странице (optional)
     * @param  int $account_id ID кассы (optional)
     * @param  int $supplier_id ID контрагента (optional)
     * @param  int $client_id ID клиента (optional)
     * @param  int $user_id ID пользователя (optional)
     * @param  int $master_id ID сотрудника (optional)
     * @param  int $type тип транзакции (optional)
     * @param  int $real_money транзакция реальными деньгами (optional)
     * @param  int $deleted была ли удалена транзакция (optional)
     * @param  string $start_date дата начала периода (optional)
     * @param  string $end_date дата окончания периода (optional)
     * @param  int $balance_is 0 - любой баланс, 1 - положительный, 2 - оттрицательный (optional)
     * @param  int $document_id идентификатор документа (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function financeTransactionGetListAsync($company_id, $accept, $content_type, $authorization, $page = null, $count = null, $account_id = null, $supplier_id = null, $client_id = null, $user_id = null, $master_id = null, $type = null, $real_money = null, $deleted = null, $start_date = null, $end_date = null, $balance_is = null, $document_id = null, string $contentType = self::contentTypes['financeTransactionGetList'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->financeTransactionGetListAsyncWithHttpInfo($company_id, $accept, $content_type, $authorization, $page, $count, $account_id, $supplier_id, $client_id, $user_id, $master_id, $type, $real_money, $deleted, $start_date, $end_date, $balance_is, $document_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation financeTransactionGetListAsyncWithHttpInfo
     *
     * Получить транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  int $page Номер страницы (optional)
     * @param  int $count Количество клиентов на странице (optional)
     * @param  int $account_id ID кассы (optional)
     * @param  int $supplier_id ID контрагента (optional)
     * @param  int $client_id ID клиента (optional)
     * @param  int $user_id ID пользователя (optional)
     * @param  int $master_id ID сотрудника (optional)
     * @param  int $type тип транзакции (optional)
     * @param  int $real_money транзакция реальными деньгами (optional)
     * @param  int $deleted была ли удалена транзакция (optional)
     * @param  string $start_date дата начала периода (optional)
     * @param  string $end_date дата окончания периода (optional)
     * @param  int $balance_is 0 - любой баланс, 1 - положительный, 2 - оттрицательный (optional)
     * @param  int $document_id идентификатор документа (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function financeTransactionGetListAsyncWithHttpInfo($company_id, $accept, $content_type, $authorization, $page = null, $count = null, $account_id = null, $supplier_id = null, $client_id = null, $user_id = null, $master_id = null, $type = null, $real_money = null, $deleted = null, $start_date = null, $end_date = null, $balance_is = null, $document_id = null, string $contentType = self::contentTypes['financeTransactionGetList'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\FinanceTransactionGetListResponse';
        $request = $this->financeTransactionGetListRequest($company_id, $accept, $content_type, $authorization, $page, $count, $account_id, $supplier_id, $client_id, $user_id, $master_id, $type, $real_money, $deleted, $start_date, $end_date, $balance_is, $document_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'financeTransactionGetList'
     *
     * @param  int $company_id ID компании (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  int $page Номер страницы (optional)
     * @param  int $count Количество клиентов на странице (optional)
     * @param  int $account_id ID кассы (optional)
     * @param  int $supplier_id ID контрагента (optional)
     * @param  int $client_id ID клиента (optional)
     * @param  int $user_id ID пользователя (optional)
     * @param  int $master_id ID сотрудника (optional)
     * @param  int $type тип транзакции (optional)
     * @param  int $real_money транзакция реальными деньгами (optional)
     * @param  int $deleted была ли удалена транзакция (optional)
     * @param  string $start_date дата начала периода (optional)
     * @param  string $end_date дата окончания периода (optional)
     * @param  int $balance_is 0 - любой баланс, 1 - положительный, 2 - оттрицательный (optional)
     * @param  int $document_id идентификатор документа (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionGetList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function financeTransactionGetListRequest($company_id, $accept, $content_type, $authorization, $page = null, $count = null, $account_id = null, $supplier_id = null, $client_id = null, $user_id = null, $master_id = null, $type = null, $real_money = null, $deleted = null, $start_date = null, $end_date = null, $balance_is = null, $document_id = null, string $contentType = self::contentTypes['financeTransactionGetList'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling financeTransactionGetList'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling financeTransactionGetList'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling financeTransactionGetList'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling financeTransactionGetList'
            );
        }
















        $resourcePath = '/transactions/{company_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_id,
            'account_id', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $supplier_id,
            'supplier_id', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_id,
            'client_id', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'user_id', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $master_id,
            'master_id', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $real_money,
            'real_money', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $deleted,
            'deleted', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'start_date', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'end_date', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $balance_is,
            'balance_is', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $document_id,
            'document_id', // param base name
            '', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation financeTransactionRemove
     *
     * Удаление транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  int $transaction_id ID транзакции (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionRemove'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\FinanceTransactionRemoveResponse
     */
    public function financeTransactionRemove($company_id, $transaction_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['financeTransactionRemove'][0]) : \Vgrish\YclientsOpenApi\Model\FinanceTransactionRemoveResponse
    {
        list($response) = $this->financeTransactionRemoveWithHttpInfo($company_id, $transaction_id, $accept, $content_type, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation financeTransactionRemoveWithHttpInfo
     *
     * Удаление транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  int $transaction_id ID транзакции (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionRemove'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\FinanceTransactionRemoveResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function financeTransactionRemoveWithHttpInfo($company_id, $transaction_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['financeTransactionRemove'][0]) : array
    {
        $request = $this->financeTransactionRemoveRequest($company_id, $transaction_id, $accept, $content_type, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\Vgrish\YclientsOpenApi\Model\FinanceTransactionRemoveResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\FinanceTransactionRemoveResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\FinanceTransactionRemoveResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\FinanceTransactionRemoveResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\FinanceTransactionRemoveResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation financeTransactionRemoveAsync
     *
     * Удаление транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  int $transaction_id ID транзакции (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function financeTransactionRemoveAsync($company_id, $transaction_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['financeTransactionRemove'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->financeTransactionRemoveAsyncWithHttpInfo($company_id, $transaction_id, $accept, $content_type, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation financeTransactionRemoveAsyncWithHttpInfo
     *
     * Удаление транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  int $transaction_id ID транзакции (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function financeTransactionRemoveAsyncWithHttpInfo($company_id, $transaction_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['financeTransactionRemove'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\FinanceTransactionRemoveResponse';
        $request = $this->financeTransactionRemoveRequest($company_id, $transaction_id, $accept, $content_type, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'financeTransactionRemove'
     *
     * @param  int $company_id ID компании (required)
     * @param  int $transaction_id ID транзакции (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function financeTransactionRemoveRequest($company_id, $transaction_id, $accept, $content_type, $authorization, string $contentType = self::contentTypes['financeTransactionRemove'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling financeTransactionRemove'
            );
        }

        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling financeTransactionRemove'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling financeTransactionRemove'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling financeTransactionRemove'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling financeTransactionRemove'
            );
        }


        $resourcePath = '/finance_transactions/{company_id}/{transaction_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transaction_id' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation financeTransactionUpdate
     *
     * Обновление финансовой транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  int $transaction_id ID транзакции (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\FinanceTransactionCreateRequest $finance_transaction_create_request finance_transaction_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionUpdate'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Vgrish\YclientsOpenApi\Model\FinanceTransactionUpdateResponse
     */
    public function financeTransactionUpdate($company_id, $transaction_id, $accept, $content_type, $authorization, $finance_transaction_create_request = null, string $contentType = self::contentTypes['financeTransactionUpdate'][0]) : \Vgrish\YclientsOpenApi\Model\FinanceTransactionUpdateResponse
    {
        list($response) = $this->financeTransactionUpdateWithHttpInfo($company_id, $transaction_id, $accept, $content_type, $authorization, $finance_transaction_create_request, $contentType);
        return $response;
    }

    /**
     * Operation financeTransactionUpdateWithHttpInfo
     *
     * Обновление финансовой транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  int $transaction_id ID транзакции (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\FinanceTransactionCreateRequest $finance_transaction_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionUpdate'] to see the possible values for this operation
     *
     * @throws \Vgrish\YclientsOpenApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Vgrish\YclientsOpenApi\Model\FinanceTransactionUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function financeTransactionUpdateWithHttpInfo($company_id, $transaction_id, $accept, $content_type, $authorization, $finance_transaction_create_request = null, string $contentType = self::contentTypes['financeTransactionUpdate'][0]) : array
    {
        $request = $this->financeTransactionUpdateRequest($company_id, $transaction_id, $accept, $content_type, $authorization, $finance_transaction_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Vgrish\YclientsOpenApi\Model\FinanceTransactionUpdateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Vgrish\YclientsOpenApi\Model\FinanceTransactionUpdateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Vgrish\YclientsOpenApi\Model\FinanceTransactionUpdateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Vgrish\YclientsOpenApi\Model\FinanceTransactionUpdateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vgrish\YclientsOpenApi\Model\FinanceTransactionUpdateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation financeTransactionUpdateAsync
     *
     * Обновление финансовой транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  int $transaction_id ID транзакции (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\FinanceTransactionCreateRequest $finance_transaction_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function financeTransactionUpdateAsync($company_id, $transaction_id, $accept, $content_type, $authorization, $finance_transaction_create_request = null, string $contentType = self::contentTypes['financeTransactionUpdate'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->financeTransactionUpdateAsyncWithHttpInfo($company_id, $transaction_id, $accept, $content_type, $authorization, $finance_transaction_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation financeTransactionUpdateAsyncWithHttpInfo
     *
     * Обновление финансовой транзакции
     *
     * @param  int $company_id ID компании (required)
     * @param  int $transaction_id ID транзакции (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\FinanceTransactionCreateRequest $finance_transaction_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function financeTransactionUpdateAsyncWithHttpInfo($company_id, $transaction_id, $accept, $content_type, $authorization, $finance_transaction_create_request = null, string $contentType = self::contentTypes['financeTransactionUpdate'][0]) : \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Vgrish\YclientsOpenApi\Model\FinanceTransactionUpdateResponse';
        $request = $this->financeTransactionUpdateRequest($company_id, $transaction_id, $accept, $content_type, $authorization, $finance_transaction_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'financeTransactionUpdate'
     *
     * @param  int $company_id ID компании (required)
     * @param  int $transaction_id ID транзакции (required)
     * @param  string $accept e.g. application/vnd.yclients.v2+json (required)
     * @param  string $content_type application/json (required)
     * @param  string $authorization Bearer partner_token, User user_token (required)
     * @param  \Vgrish\YclientsOpenApi\Model\FinanceTransactionCreateRequest $finance_transaction_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['financeTransactionUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function financeTransactionUpdateRequest($company_id, $transaction_id, $accept, $content_type, $authorization, $finance_transaction_create_request = null, string $contentType = self::contentTypes['financeTransactionUpdate'][0]) : \GuzzleHttp\Psr7\Request
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling financeTransactionUpdate'
            );
        }

        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling financeTransactionUpdate'
            );
        }

        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling financeTransactionUpdate'
            );
        }

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling financeTransactionUpdate'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling financeTransactionUpdate'
            );
        }



        $resourcePath = '/finance_transactions/{company_id}/{transaction_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transaction_id' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.yclients.v2+json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($finance_transaction_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($finance_transaction_create_request));
            } else {
                $httpBody = $finance_transaction_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption() : array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
