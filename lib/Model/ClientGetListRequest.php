<?php
/**
 * ClientGetListRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Vgrish\YclientsOpenApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yclients
 *
 * yclients-openapi-php package for YCLIENTS generated based on the openapi schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Vgrish\YclientsOpenApi\Model;

use ArrayAccess;
use Vgrish\YclientsOpenApi\ObjectSerializer;

/**
 * ClientGetListRequest Class Doc Comment
 *
 * @category Class
 * @description Получить список клиентов
 * @package  Vgrish\YclientsOpenApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ClientGetListRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ClientGetListRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'page' => 'int',
        'page_size' => 'int',
        'fields' => 'string[]',
        'order_by' => 'string',
        'order_by_direction' => 'string',
        'operation' => 'string',
        'filters' => '\Vgrish\YclientsOpenApi\Model\ClientGetListRequestFilters[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'page' => null,
        'page_size' => null,
        'fields' => null,
        'order_by' => null,
        'order_by_direction' => null,
        'operation' => null,
        'filters' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'page' => false,
        'page_size' => false,
        'fields' => false,
        'order_by' => false,
        'order_by_direction' => false,
        'operation' => false,
        'filters' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables() : array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull() : array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull) : void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property) : bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property) : bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'page' => 'page',
        'page_size' => 'page_size',
        'fields' => 'fields',
        'order_by' => 'order_by',
        'order_by_direction' => 'order_by_direction',
        'operation' => 'operation',
        'filters' => 'filters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'page' => 'setPage',
        'page_size' => 'setPageSize',
        'fields' => 'setFields',
        'order_by' => 'setOrderBy',
        'order_by_direction' => 'setOrderByDirection',
        'operation' => 'setOperation',
        'filters' => 'setFilters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'page' => 'getPage',
        'page_size' => 'getPageSize',
        'fields' => 'getFields',
        'order_by' => 'getOrderBy',
        'order_by_direction' => 'getOrderByDirection',
        'operation' => 'getOperation',
        'filters' => 'getFilters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    public const ORDER_BY_ID = 'id';
    public const ORDER_BY_NAME = 'name';
    public const ORDER_BY_PHONE = 'phone';
    public const ORDER_BY_EMAIL = 'email';
    public const ORDER_BY_DISCOUNT = 'discount';
    public const ORDER_BY_FIRST_VISIT_DATE = 'first_visit_date';
    public const ORDER_BY_LAST_VISIT_DATE = 'last_visit_date';
    public const ORDER_BY_SOLD_AMOUNT = 'sold_amount';
    public const ORDER_BY_VISITS_COUNT = 'visits_count';
    public const ORDER_BY_DIRECTION_ASC = 'ASC';
    public const ORDER_BY_DIRECTION_DESC = 'DESC';
    public const OPERATION__AND = 'AND';
    public const OPERATION__OR = 'OR';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderByAllowableValues() : array
    {
        return [
            self::ORDER_BY_ID,
            self::ORDER_BY_NAME,
            self::ORDER_BY_PHONE,
            self::ORDER_BY_EMAIL,
            self::ORDER_BY_DISCOUNT,
            self::ORDER_BY_FIRST_VISIT_DATE,
            self::ORDER_BY_LAST_VISIT_DATE,
            self::ORDER_BY_SOLD_AMOUNT,
            self::ORDER_BY_VISITS_COUNT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderByDirectionAllowableValues() : array
    {
        return [
            self::ORDER_BY_DIRECTION_ASC,
            self::ORDER_BY_DIRECTION_DESC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationAllowableValues() : array
    {
        return [
            self::OPERATION__AND,
            self::OPERATION__OR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('page', $data ?? [], null);
        $this->setIfExists('page_size', $data ?? [], null);
        $this->setIfExists('fields', $data ?? [], null);
        $this->setIfExists('order_by', $data ?? [], null);
        $this->setIfExists('order_by_direction', $data ?? [], null);
        $this->setIfExists('operation', $data ?? [], null);
        $this->setIfExists('filters', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue) : void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() : array
    {
        $invalidProperties = [];

        $allowedValues = $this->getOrderByAllowableValues();
        if (!is_null($this->container['order_by']) && !in_array($this->container['order_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order_by', must be one of '%s'",
                $this->container['order_by'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderByDirectionAllowableValues();
        if (!is_null($this->container['order_by_direction']) && !in_array($this->container['order_by_direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order_by_direction', must be one of '%s'",
                $this->container['order_by_direction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($this->container['operation']) && !in_array($this->container['operation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'operation', must be one of '%s'",
                $this->container['operation'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid() : bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets page
     *
     * @return int|null
     */
    public function getPage() : ?int
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param int|null $page Номер страница
     *
     * @return self
     */
    public function setPage($page) : self
    {
        if (is_null($page)) {
            throw new \InvalidArgumentException('non-nullable page cannot be null');
        }
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int|null
     */
    public function getPageSize() : ?int
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int|null $page_size Количество выводимых строк на странице. Максимум 200. (По умолчанию 25)
     *
     * @return self
     */
    public function setPageSize($page_size) : self
    {
        if (is_null($page_size)) {
            throw new \InvalidArgumentException('non-nullable page_size cannot be null');
        }
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return string[]|null
     */
    public function getFields() : ?array
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param string[]|null $fields Поля, которые нужно вернуть в ответе
     *
     * @return self
     */
    public function setFields($fields) : self
    {
        if (is_null($fields)) {
            throw new \InvalidArgumentException('non-nullable fields cannot be null');
        }
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return string|null
     */
    public function getOrderBy() : ?string
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param string|null $order_by По какому полю сортировать
     *
     * @return self
     */
    public function setOrderBy($order_by) : self
    {
        if (is_null($order_by)) {
            throw new \InvalidArgumentException('non-nullable order_by cannot be null');
        }
        $allowedValues = $this->getOrderByAllowableValues();
        if (!in_array($order_by, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order_by', must be one of '%s'",
                    $order_by,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets order_by_direction
     *
     * @return string|null
     */
    public function getOrderByDirection() : ?string
    {
        return $this->container['order_by_direction'];
    }

    /**
     * Sets order_by_direction
     *
     * @param string|null $order_by_direction Как сортировать (по возрастанию / по убыванию)
     *
     * @return self
     */
    public function setOrderByDirection($order_by_direction) : self
    {
        if (is_null($order_by_direction)) {
            throw new \InvalidArgumentException('non-nullable order_by_direction cannot be null');
        }
        $allowedValues = $this->getOrderByDirectionAllowableValues();
        if (!in_array($order_by_direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order_by_direction', must be one of '%s'",
                    $order_by_direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_by_direction'] = $order_by_direction;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return string|null
     */
    public function getOperation() : ?string
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string|null $operation Тип операции
     *
     * @return self
     */
    public function setOperation($operation) : self
    {
        if (is_null($operation)) {
            throw new \InvalidArgumentException('non-nullable operation cannot be null');
        }
        $allowedValues = $this->getOperationAllowableValues();
        if (!in_array($operation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'operation', must be one of '%s'",
                    $operation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \Vgrish\YclientsOpenApi\Model\ClientGetListRequestFilters[]|null
     */
    public function getFilters() : ?array
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \Vgrish\YclientsOpenApi\Model\ClientGetListRequestFilters[]|null $filters Фильтры для поиска по клиентам
     *
     * @return self
     */
    public function setFilters($filters) : self
    {
        if (is_null($filters)) {
            throw new \InvalidArgumentException('non-nullable filters cannot be null');
        }
        $this->container['filters'] = $filters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }


    /**
    * Gets array presentation of the object
    *
    * @return array
    */
    public function toArray() : array
    {
        return json_decode(json_encode(ObjectSerializer::sanitizeForSerialization($this)), true);
    }

}


