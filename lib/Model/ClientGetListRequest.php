<?php
/**
 * ClientGetListRequest
 *
 * @category Class
 * @package  Vgrish\YclientsOpenApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yclients
 *
 * yclients-openapi-php package for YCLIENTS generated based on the openapi schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Vgrish\YclientsOpenApi\Model;

use ArrayAccess;
use Vgrish\YclientsOpenApi\ObjectSerializer;

/**
 * ClientGetListRequest Class Doc Comment
 *
 * @category Class
 * @description Получить список клиентов
 * @package  Vgrish\YclientsOpenApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ClientGetListRequest implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ClientGetListRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'page' => 'float',
        'page_size' => 'float',
        'fields' => 'string[]',
        'order_by' => 'string',
        'order_by_direction' => 'string',
        'operation' => 'string',
        'filters' => '\Vgrish\YclientsOpenApi\Model\ClientGetListRequestFilters[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'page' => null,
        'page_size' => null,
        'fields' => null,
        'order_by' => null,
        'order_by_direction' => null,
        'operation' => null,
        'filters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'page' => 'page',
        'page_size' => 'page_size',
        'fields' => 'fields',
        'order_by' => 'order_by',
        'order_by_direction' => 'order_by_direction',
        'operation' => 'operation',
        'filters' => 'filters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'page' => 'setPage',
        'page_size' => 'setPageSize',
        'fields' => 'setFields',
        'order_by' => 'setOrderBy',
        'order_by_direction' => 'setOrderByDirection',
        'operation' => 'setOperation',
        'filters' => 'setFilters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'page' => 'getPage',
        'page_size' => 'getPageSize',
        'fields' => 'getFields',
        'order_by' => 'getOrderBy',
        'order_by_direction' => 'getOrderByDirection',
        'operation' => 'getOperation',
        'filters' => 'getFilters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    public const ORDER_BY_ID = 'id';
    public const ORDER_BY_NAME = 'name';
    public const ORDER_BY_PHONE = 'phone';
    public const ORDER_BY_EMAIL = 'email';
    public const ORDER_BY_DISCOUNT = 'discount';
    public const ORDER_BY_FIRST_VISIT_DATE = 'first_visit_date';
    public const ORDER_BY_LAST_VISIT_DATE = 'last_visit_date';
    public const ORDER_BY_SOLD_AMOUNT = 'sold_amount';
    public const ORDER_BY_VISITS_COUNT = 'visits_count';
    public const ORDER_BY_DIRECTION_ASC = 'ASC';
    public const ORDER_BY_DIRECTION_DESC = 'DESC';
    public const OPERATION__AND = 'AND';
    public const OPERATION__OR = 'OR';



    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderByAllowableValues() : array
    {
        return [
            self::ORDER_BY_ID,
            self::ORDER_BY_NAME,
            self::ORDER_BY_PHONE,
            self::ORDER_BY_EMAIL,
            self::ORDER_BY_DISCOUNT,
            self::ORDER_BY_FIRST_VISIT_DATE,
            self::ORDER_BY_LAST_VISIT_DATE,
            self::ORDER_BY_SOLD_AMOUNT,
            self::ORDER_BY_VISITS_COUNT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderByDirectionAllowableValues() : array
    {
        return [
            self::ORDER_BY_DIRECTION_ASC,
            self::ORDER_BY_DIRECTION_DESC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationAllowableValues() : array
    {
        return [
            self::OPERATION__AND,
            self::OPERATION__OR,
        ];
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['page'] = isset($data['page']) ? $data['page'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
        $this->container['order_by_direction'] = isset($data['order_by_direction']) ? $data['order_by_direction'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['filters'] = isset($data['filters']) ? $data['filters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() : array
    {
        $invalidProperties = [];

        $allowedValues = $this->getOrderByAllowableValues();
        if (!is_null($this->container['order_by']) && !in_array($this->container['order_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'order_by', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderByDirectionAllowableValues();
        if (!is_null($this->container['order_by_direction']) && !in_array($this->container['order_by_direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'order_by_direction', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($this->container['operation']) && !in_array($this->container['operation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid() : bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets page
     *
     * @return float|null
     */
    public function getPage() : ?float
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param float|null $page Номер страница
     *
     * @return $this
     */
    public function setPage($page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return float|null
     */
    public function getPageSize() : ?float
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param float|null $page_size Количество выводимых строк на странице. Максимум 200. (По умолчанию 25)
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return string[]|null
     */
    public function getFields() : ?array
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param string[]|null $fields Поля, которые нужно вернуть в ответе
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return string|null
     */
    public function getOrderBy() : ?string
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param string|null $order_by По какому полю сортировать
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $allowedValues = $this->getOrderByAllowableValues();
        if (!is_null($order_by) && !in_array($order_by, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'order_by', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets order_by_direction
     *
     * @return string|null
     */
    public function getOrderByDirection() : ?string
    {
        return $this->container['order_by_direction'];
    }

    /**
     * Sets order_by_direction
     *
     * @param string|null $order_by_direction Как сортировать (по возрастанию / по убыванию)
     *
     * @return $this
     */
    public function setOrderByDirection($order_by_direction)
    {
        $allowedValues = $this->getOrderByDirectionAllowableValues();
        if (!is_null($order_by_direction) && !in_array($order_by_direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'order_by_direction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_by_direction'] = $order_by_direction;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return string|null
     */
    public function getOperation() : ?string
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string|null $operation Тип операции
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($operation) && !in_array($operation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \Vgrish\YclientsOpenApi\Model\ClientGetListRequestFilters[]|null
     */
    public function getFilters() : ?array
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \Vgrish\YclientsOpenApi\Model\ClientGetListRequestFilters[]|null $filters Фильтры для поиска по клиентам
     *
     * @return $this
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset) : mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets array presentation of the object
     *
     * @return array
     */
    public function toArray() : array
    {
        $array = [];
        foreach ($this->container as $key => $value) {
            if (is_a($value, ModelInterface::class)) {
                $array[$key] = $value->toArray();
            } else {
                $array[$key] = $value;
            }
        }
        return $array;
    }

}


