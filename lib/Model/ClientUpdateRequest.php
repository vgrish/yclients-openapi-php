<?php
/**
 * ClientUpdateRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Vgrish\YclientsOpenApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yclients
 *
 * yclients-openapi-php package for YCLIENTS generated based on the openapi schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Vgrish\YclientsOpenApi\Model;

use ArrayAccess;
use Vgrish\YclientsOpenApi\ObjectSerializer;

/**
 * ClientUpdateRequest Class Doc Comment
 *
 * @category Class
 * @package  Vgrish\YclientsOpenApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ClientUpdateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ClientUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'phone' => 'string',
        'surname' => 'string',
        'patronymic' => 'string',
        'email' => 'string',
        'sex_id' => 'string',
        'importance_id' => 'string',
        'discount' => 'string',
        'card' => 'string',
        'birth_date' => 'string',
        'comment' => 'string',
        'spent' => 'string',
        'balance' => 'string',
        'sms_check' => 'string',
        'sms_not' => 'string',
        'labels' => 'map[string,object]',
        'custom_fields' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'phone' => null,
        'surname' => null,
        'patronymic' => null,
        'email' => null,
        'sex_id' => null,
        'importance_id' => null,
        'discount' => null,
        'card' => null,
        'birth_date' => null,
        'comment' => null,
        'spent' => null,
        'balance' => null,
        'sms_check' => null,
        'sms_not' => null,
        'labels' => null,
        'custom_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'phone' => false,
        'surname' => false,
        'patronymic' => false,
        'email' => false,
        'sex_id' => false,
        'importance_id' => false,
        'discount' => false,
        'card' => false,
        'birth_date' => false,
        'comment' => false,
        'spent' => false,
        'balance' => false,
        'sms_check' => false,
        'sms_not' => false,
        'labels' => false,
        'custom_fields' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables() : array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull() : array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull) : void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property) : bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property) : bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'phone' => 'phone',
        'surname' => 'surname',
        'patronymic' => 'patronymic',
        'email' => 'email',
        'sex_id' => 'sex_id',
        'importance_id' => 'importance_id',
        'discount' => 'discount',
        'card' => 'card',
        'birth_date' => 'birth_date',
        'comment' => 'comment',
        'spent' => 'spent',
        'balance' => 'balance',
        'sms_check' => 'sms_check',
        'sms_not' => 'sms_not',
        'labels' => 'labels',
        'custom_fields' => 'custom_fields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'phone' => 'setPhone',
        'surname' => 'setSurname',
        'patronymic' => 'setPatronymic',
        'email' => 'setEmail',
        'sex_id' => 'setSexId',
        'importance_id' => 'setImportanceId',
        'discount' => 'setDiscount',
        'card' => 'setCard',
        'birth_date' => 'setBirthDate',
        'comment' => 'setComment',
        'spent' => 'setSpent',
        'balance' => 'setBalance',
        'sms_check' => 'setSmsCheck',
        'sms_not' => 'setSmsNot',
        'labels' => 'setLabels',
        'custom_fields' => 'setCustomFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'phone' => 'getPhone',
        'surname' => 'getSurname',
        'patronymic' => 'getPatronymic',
        'email' => 'getEmail',
        'sex_id' => 'getSexId',
        'importance_id' => 'getImportanceId',
        'discount' => 'getDiscount',
        'card' => 'getCard',
        'birth_date' => 'getBirthDate',
        'comment' => 'getComment',
        'spent' => 'getSpent',
        'balance' => 'getBalance',
        'sms_check' => 'getSmsCheck',
        'sms_not' => 'getSmsNot',
        'labels' => 'getLabels',
        'custom_fields' => 'getCustomFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('surname', $data ?? [], null);
        $this->setIfExists('patronymic', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('sex_id', $data ?? [], null);
        $this->setIfExists('importance_id', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('card', $data ?? [], null);
        $this->setIfExists('birth_date', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('spent', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('sms_check', $data ?? [], null);
        $this->setIfExists('sms_not', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue) : void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() : array
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid() : bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName() : string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Имя клиента
     *
     * @return self
     */
    public function setName($name) : self
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone() : string
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Телефон клиента
     *
     * @return self
     */
    public function setPhone($phone) : self
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname() : ?string
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname surname
     *
     * @return self
     */
    public function setSurname($surname) : self
    {
        if (is_null($surname)) {
            throw new \InvalidArgumentException('non-nullable surname cannot be null');
        }
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets patronymic
     *
     * @return string|null
     */
    public function getPatronymic() : ?string
    {
        return $this->container['patronymic'];
    }

    /**
     * Sets patronymic
     *
     * @param string|null $patronymic patronymic
     *
     * @return self
     */
    public function setPatronymic($patronymic) : self
    {
        if (is_null($patronymic)) {
            throw new \InvalidArgumentException('non-nullable patronymic cannot be null');
        }
        $this->container['patronymic'] = $patronymic;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail() : ?string
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email) : self
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets sex_id
     *
     * @return string|null
     */
    public function getSexId() : ?string
    {
        return $this->container['sex_id'];
    }

    /**
     * Sets sex_id
     *
     * @param string|null $sex_id sex_id
     *
     * @return self
     */
    public function setSexId($sex_id) : self
    {
        if (is_null($sex_id)) {
            throw new \InvalidArgumentException('non-nullable sex_id cannot be null');
        }
        $this->container['sex_id'] = $sex_id;

        return $this;
    }

    /**
     * Gets importance_id
     *
     * @return string|null
     */
    public function getImportanceId() : ?string
    {
        return $this->container['importance_id'];
    }

    /**
     * Sets importance_id
     *
     * @param string|null $importance_id importance_id
     *
     * @return self
     */
    public function setImportanceId($importance_id) : self
    {
        if (is_null($importance_id)) {
            throw new \InvalidArgumentException('non-nullable importance_id cannot be null');
        }
        $this->container['importance_id'] = $importance_id;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return string|null
     */
    public function getDiscount() : ?string
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param string|null $discount discount
     *
     * @return self
     */
    public function setDiscount($discount) : self
    {
        if (is_null($discount)) {
            throw new \InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets card
     *
     * @return string|null
     */
    public function getCard() : ?string
    {
        return $this->container['card'];
    }

    /**
     * Sets card
     *
     * @param string|null $card card
     *
     * @return self
     */
    public function setCard($card) : self
    {
        if (is_null($card)) {
            throw new \InvalidArgumentException('non-nullable card cannot be null');
        }
        $this->container['card'] = $card;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return string|null
     */
    public function getBirthDate() : ?string
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param string|null $birth_date birth_date
     *
     * @return self
     */
    public function setBirthDate($birth_date) : self
    {
        if (is_null($birth_date)) {
            throw new \InvalidArgumentException('non-nullable birth_date cannot be null');
        }
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment() : ?string
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment) : self
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets spent
     *
     * @return string|null
     */
    public function getSpent() : ?string
    {
        return $this->container['spent'];
    }

    /**
     * Sets spent
     *
     * @param string|null $spent spent
     *
     * @return self
     */
    public function setSpent($spent) : self
    {
        if (is_null($spent)) {
            throw new \InvalidArgumentException('non-nullable spent cannot be null');
        }
        $this->container['spent'] = $spent;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return string|null
     */
    public function getBalance() : ?string
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param string|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance) : self
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets sms_check
     *
     * @return string|null
     */
    public function getSmsCheck() : ?string
    {
        return $this->container['sms_check'];
    }

    /**
     * Sets sms_check
     *
     * @param string|null $sms_check sms_check
     *
     * @return self
     */
    public function setSmsCheck($sms_check) : self
    {
        if (is_null($sms_check)) {
            throw new \InvalidArgumentException('non-nullable sms_check cannot be null');
        }
        $this->container['sms_check'] = $sms_check;

        return $this;
    }

    /**
     * Gets sms_not
     *
     * @return string|null
     */
    public function getSmsNot() : ?string
    {
        return $this->container['sms_not'];
    }

    /**
     * Sets sms_not
     *
     * @param string|null $sms_not sms_not
     *
     * @return self
     */
    public function setSmsNot($sms_not) : self
    {
        if (is_null($sms_not)) {
            throw new \InvalidArgumentException('non-nullable sms_not cannot be null');
        }
        $this->container['sms_not'] = $sms_not;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return map[string,object]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param map[string,object]|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels) : self
    {
        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,object]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,object]|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields) : self
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }


    /**
    * Gets array presentation of the object
    *
    * @return array
    */
    public function toArray() : array
    {
        return json_decode(json_encode(ObjectSerializer::sanitizeForSerialization($this)), true);
    }

}


