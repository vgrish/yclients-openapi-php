<?php
/**
 * CompanyResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Vgrish\YclientsOpenApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yclients
 *
 * yclients-openapi-php package for YCLIENTS generated based on the openapi schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Vgrish\YclientsOpenApi\Model;

use ArrayAccess;
use Vgrish\YclientsOpenApi\ObjectSerializer;

/**
 * CompanyResponse Class Doc Comment
 *
 * @category Class
 * @description Объект с данными
 * @package  Vgrish\YclientsOpenApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CompanyResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CompanyResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'title' => 'string',
        'country_id' => 'int',
        'country' => 'string',
        'city_id' => 'int',
        'city' => 'string',
        'timezone_name' => 'string',
        'address' => 'string',
        'zip' => 'string',
        'social' => 'map[string,object]',
        'site' => 'string',
        'coordinate_lat' => 'float',
        'coordinate_lon' => 'float',
        'phone_confirmation' => 'bool',
        'active_staff_count' => 'int',
        'next_slot' => '\DateTime',
        'group_priority' => 'int',
        'push_notification_phone_confirm' => 'int',
        'main_group_id' => 'int',
        'main_group' => 'map[string,object]',
        'groups' => 'map[string,object]',
        'bookforms' => 'map[string,object][]',
        'online_sales_form_url' => 'string',
        'access' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'title' => null,
        'country_id' => 'int32',
        'country' => null,
        'city_id' => 'int32',
        'city' => null,
        'timezone_name' => null,
        'address' => null,
        'zip' => null,
        'social' => null,
        'site' => null,
        'coordinate_lat' => 'float',
        'coordinate_lon' => 'float',
        'phone_confirmation' => null,
        'active_staff_count' => null,
        'next_slot' => 'date-time',
        'group_priority' => 'int32',
        'push_notification_phone_confirm' => 'int32',
        'main_group_id' => 'int32',
        'main_group' => null,
        'groups' => null,
        'bookforms' => null,
        'online_sales_form_url' => null,
        'access' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'title' => false,
        'country_id' => false,
        'country' => false,
        'city_id' => false,
        'city' => false,
        'timezone_name' => false,
        'address' => false,
        'zip' => false,
        'social' => false,
        'site' => false,
        'coordinate_lat' => false,
        'coordinate_lon' => false,
        'phone_confirmation' => false,
        'active_staff_count' => false,
        'next_slot' => false,
        'group_priority' => false,
        'push_notification_phone_confirm' => false,
        'main_group_id' => false,
        'main_group' => false,
        'groups' => false,
        'bookforms' => false,
        'online_sales_form_url' => false,
        'access' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables() : array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull() : array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull) : void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property) : bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property) : bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'title' => 'title',
        'country_id' => 'country_id',
        'country' => 'country',
        'city_id' => 'city_id',
        'city' => 'city',
        'timezone_name' => 'timezone_name',
        'address' => 'address',
        'zip' => 'zip',
        'social' => 'social',
        'site' => 'site',
        'coordinate_lat' => 'coordinate_lat',
        'coordinate_lon' => 'coordinate_lon',
        'phone_confirmation' => 'phone_confirmation',
        'active_staff_count' => 'active_staff_count',
        'next_slot' => 'next_slot',
        'group_priority' => 'group_priority',
        'push_notification_phone_confirm' => 'push_notification_phone_confirm',
        'main_group_id' => 'main_group_id',
        'main_group' => 'main_group',
        'groups' => 'groups',
        'bookforms' => 'bookforms',
        'online_sales_form_url' => 'online_sales_form_url',
        'access' => 'access'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'title' => 'setTitle',
        'country_id' => 'setCountryId',
        'country' => 'setCountry',
        'city_id' => 'setCityId',
        'city' => 'setCity',
        'timezone_name' => 'setTimezoneName',
        'address' => 'setAddress',
        'zip' => 'setZip',
        'social' => 'setSocial',
        'site' => 'setSite',
        'coordinate_lat' => 'setCoordinateLat',
        'coordinate_lon' => 'setCoordinateLon',
        'phone_confirmation' => 'setPhoneConfirmation',
        'active_staff_count' => 'setActiveStaffCount',
        'next_slot' => 'setNextSlot',
        'group_priority' => 'setGroupPriority',
        'push_notification_phone_confirm' => 'setPushNotificationPhoneConfirm',
        'main_group_id' => 'setMainGroupId',
        'main_group' => 'setMainGroup',
        'groups' => 'setGroups',
        'bookforms' => 'setBookforms',
        'online_sales_form_url' => 'setOnlineSalesFormUrl',
        'access' => 'setAccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'title' => 'getTitle',
        'country_id' => 'getCountryId',
        'country' => 'getCountry',
        'city_id' => 'getCityId',
        'city' => 'getCity',
        'timezone_name' => 'getTimezoneName',
        'address' => 'getAddress',
        'zip' => 'getZip',
        'social' => 'getSocial',
        'site' => 'getSite',
        'coordinate_lat' => 'getCoordinateLat',
        'coordinate_lon' => 'getCoordinateLon',
        'phone_confirmation' => 'getPhoneConfirmation',
        'active_staff_count' => 'getActiveStaffCount',
        'next_slot' => 'getNextSlot',
        'group_priority' => 'getGroupPriority',
        'push_notification_phone_confirm' => 'getPushNotificationPhoneConfirm',
        'main_group_id' => 'getMainGroupId',
        'main_group' => 'getMainGroup',
        'groups' => 'getGroups',
        'bookforms' => 'getBookforms',
        'online_sales_form_url' => 'getOnlineSalesFormUrl',
        'access' => 'getAccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('country_id', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('city_id', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('timezone_name', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('zip', $data ?? [], null);
        $this->setIfExists('social', $data ?? [], null);
        $this->setIfExists('site', $data ?? [], null);
        $this->setIfExists('coordinate_lat', $data ?? [], null);
        $this->setIfExists('coordinate_lon', $data ?? [], null);
        $this->setIfExists('phone_confirmation', $data ?? [], null);
        $this->setIfExists('active_staff_count', $data ?? [], null);
        $this->setIfExists('next_slot', $data ?? [], null);
        $this->setIfExists('group_priority', $data ?? [], null);
        $this->setIfExists('push_notification_phone_confirm', $data ?? [], null);
        $this->setIfExists('main_group_id', $data ?? [], null);
        $this->setIfExists('main_group', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('bookforms', $data ?? [], null);
        $this->setIfExists('online_sales_form_url', $data ?? [], null);
        $this->setIfExists('access', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue) : void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() : array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid() : bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId() : ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Идентификатор компании
     *
     * @return self
     */
    public function setId($id) : self
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle() : ?string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Название компании
     *
     * @return self
     */
    public function setTitle($title) : self
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return int|null
     */
    public function getCountryId() : ?int
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param int|null $country_id Идентификатор страны, в которой расположена компания
     *
     * @return self
     */
    public function setCountryId($country_id) : self
    {
        if (is_null($country_id)) {
            throw new \InvalidArgumentException('non-nullable country_id cannot be null');
        }
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry() : ?string
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Название страны, в которой расположена компания
     *
     * @return self
     */
    public function setCountry($country) : self
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets city_id
     *
     * @return int|null
     */
    public function getCityId() : ?int
    {
        return $this->container['city_id'];
    }

    /**
     * Sets city_id
     *
     * @param int|null $city_id Идентификатор города, в котором расположена компания
     *
     * @return self
     */
    public function setCityId($city_id) : self
    {
        if (is_null($city_id)) {
            throw new \InvalidArgumentException('non-nullable city_id cannot be null');
        }
        $this->container['city_id'] = $city_id;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity() : ?string
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city Название города, в котором расположена компания
     *
     * @return self
     */
    public function setCity($city) : self
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets timezone_name
     *
     * @return string|null
     */
    public function getTimezoneName() : ?string
    {
        return $this->container['timezone_name'];
    }

    /**
     * Sets timezone_name
     *
     * @param string|null $timezone_name Наименование временной зоны, в которой расположена компания
     *
     * @return self
     */
    public function setTimezoneName($timezone_name) : self
    {
        if (is_null($timezone_name)) {
            throw new \InvalidArgumentException('non-nullable timezone_name cannot be null');
        }
        $this->container['timezone_name'] = $timezone_name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress() : ?string
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address Адрес, по которому расположена компания
     *
     * @return self
     */
    public function setAddress($address) : self
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip() : ?string
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip Индекс
     *
     * @return self
     */
    public function setZip($zip) : self
    {
        if (is_null($zip)) {
            throw new \InvalidArgumentException('non-nullable zip cannot be null');
        }
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets social
     *
     * @return map[string,object]|null
     */
    public function getSocial()
    {
        return $this->container['social'];
    }

    /**
     * Sets social
     *
     * @param map[string,object]|null $social Социальные сети компании
     *
     * @return self
     */
    public function setSocial($social) : self
    {
        if (is_null($social)) {
            throw new \InvalidArgumentException('non-nullable social cannot be null');
        }
        $this->container['social'] = $social;

        return $this;
    }

    /**
     * Gets site
     *
     * @return string|null
     */
    public function getSite() : ?string
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param string|null $site Сайт компании
     *
     * @return self
     */
    public function setSite($site) : self
    {
        if (is_null($site)) {
            throw new \InvalidArgumentException('non-nullable site cannot be null');
        }
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets coordinate_lat
     *
     * @return float|null
     */
    public function getCoordinateLat() : ?float
    {
        return $this->container['coordinate_lat'];
    }

    /**
     * Sets coordinate_lat
     *
     * @param float|null $coordinate_lat Широта
     *
     * @return self
     */
    public function setCoordinateLat($coordinate_lat) : self
    {
        if (is_null($coordinate_lat)) {
            throw new \InvalidArgumentException('non-nullable coordinate_lat cannot be null');
        }
        $this->container['coordinate_lat'] = $coordinate_lat;

        return $this;
    }

    /**
     * Gets coordinate_lon
     *
     * @return float|null
     */
    public function getCoordinateLon() : ?float
    {
        return $this->container['coordinate_lon'];
    }

    /**
     * Sets coordinate_lon
     *
     * @param float|null $coordinate_lon Долгота
     *
     * @return self
     */
    public function setCoordinateLon($coordinate_lon) : self
    {
        if (is_null($coordinate_lon)) {
            throw new \InvalidArgumentException('non-nullable coordinate_lon cannot be null');
        }
        $this->container['coordinate_lon'] = $coordinate_lon;

        return $this;
    }

    /**
     * Gets phone_confirmation
     *
     * @return bool|null
     */
    public function getPhoneConfirmation() : ?bool
    {
        return $this->container['phone_confirmation'];
    }

    /**
     * Sets phone_confirmation
     *
     * @param bool|null $phone_confirmation Нужно ли подтверждать телефон по смс, при бронировании
     *
     * @return self
     */
    public function setPhoneConfirmation($phone_confirmation) : self
    {
        if (is_null($phone_confirmation)) {
            throw new \InvalidArgumentException('non-nullable phone_confirmation cannot be null');
        }
        $this->container['phone_confirmation'] = $phone_confirmation;

        return $this;
    }

    /**
     * Gets active_staff_count
     *
     * @return int|null
     */
    public function getActiveStaffCount() : ?int
    {
        return $this->container['active_staff_count'];
    }

    /**
     * Sets active_staff_count
     *
     * @param int|null $active_staff_count Количество сотрудников, доступных для бронирования. Поле будет присутствовать только если передан GET параметр forBooking=1
     *
     * @return self
     */
    public function setActiveStaffCount($active_staff_count) : self
    {
        if (is_null($active_staff_count)) {
            throw new \InvalidArgumentException('non-nullable active_staff_count cannot be null');
        }
        $this->container['active_staff_count'] = $active_staff_count;

        return $this;
    }

    /**
     * Gets next_slot
     *
     * @return \DateTime|null
     */
    public function getNextSlot() : ?\DateTime
    {
        return $this->container['next_slot'];
    }

    /**
     * Sets next_slot
     *
     * @param \DateTime|null $next_slot Дата и время ближайшего свободного сеанса в компании (ISO8601). Поле будет присутствовать только если передан GET параметр forBooking=1
     *
     * @return self
     */
    public function setNextSlot($next_slot) : self
    {
        if (is_null($next_slot)) {
            throw new \InvalidArgumentException('non-nullable next_slot cannot be null');
        }
        $this->container['next_slot'] = $next_slot;

        return $this;
    }

    /**
     * Gets group_priority
     *
     * @return int|null
     */
    public function getGroupPriority() : ?int
    {
        return $this->container['group_priority'];
    }

    /**
     * Sets group_priority
     *
     * @param int|null $group_priority Чем больше приоритет, тем выше компания при выводе в списке филиалов сети
     *
     * @return self
     */
    public function setGroupPriority($group_priority) : self
    {
        if (is_null($group_priority)) {
            throw new \InvalidArgumentException('non-nullable group_priority cannot be null');
        }
        $this->container['group_priority'] = $group_priority;

        return $this;
    }

    /**
     * Gets push_notification_phone_confirm
     *
     * @return int|null
     */
    public function getPushNotificationPhoneConfirm() : ?int
    {
        return $this->container['push_notification_phone_confirm'];
    }

    /**
     * Sets push_notification_phone_confirm
     *
     * @param int|null $push_notification_phone_confirm Подтверждать номер клиента для отправки push уведомлений
     *
     * @return self
     */
    public function setPushNotificationPhoneConfirm($push_notification_phone_confirm) : self
    {
        if (is_null($push_notification_phone_confirm)) {
            throw new \InvalidArgumentException('non-nullable push_notification_phone_confirm cannot be null');
        }
        $this->container['push_notification_phone_confirm'] = $push_notification_phone_confirm;

        return $this;
    }

    /**
     * Gets main_group_id
     *
     * @return int|null
     */
    public function getMainGroupId() : ?int
    {
        return $this->container['main_group_id'];
    }

    /**
     * Sets main_group_id
     *
     * @param int|null $main_group_id Идентификатор основной сети компании
     *
     * @return self
     */
    public function setMainGroupId($main_group_id) : self
    {
        if (is_null($main_group_id)) {
            throw new \InvalidArgumentException('non-nullable main_group_id cannot be null');
        }
        $this->container['main_group_id'] = $main_group_id;

        return $this;
    }

    /**
     * Gets main_group
     *
     * @return map[string,object]|null
     */
    public function getMainGroup()
    {
        return $this->container['main_group'];
    }

    /**
     * Sets main_group
     *
     * @param map[string,object]|null $main_group Основная сеть компании
     *
     * @return self
     */
    public function setMainGroup($main_group) : self
    {
        if (is_null($main_group)) {
            throw new \InvalidArgumentException('non-nullable main_group cannot be null');
        }
        $this->container['main_group'] = $main_group;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return map[string,object]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param map[string,object]|null $groups Сети в которые входит компания. Поле будет присутствовать только если передан GET параметр show_groups=1
     *
     * @return self
     */
    public function setGroups($groups) : self
    {
        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets bookforms
     *
     * @return map[string,object][]|null
     */
    public function getBookforms()
    {
        return $this->container['bookforms'];
    }

    /**
     * Sets bookforms
     *
     * @param map[string,object][]|null $bookforms Виджеты онлайн-записи компании
     *
     * @return self
     */
    public function setBookforms($bookforms) : self
    {
        if (is_null($bookforms)) {
            throw new \InvalidArgumentException('non-nullable bookforms cannot be null');
        }
        $this->container['bookforms'] = $bookforms;

        return $this;
    }

    /**
     * Gets online_sales_form_url
     *
     * @return string|null
     */
    public function getOnlineSalesFormUrl() : ?string
    {
        return $this->container['online_sales_form_url'];
    }

    /**
     * Sets online_sales_form_url
     *
     * @param string|null $online_sales_form_url Адрес виджета онлайн-записи. Поле будет присутствовать только если передан GET параметр bookform_id
     *
     * @return self
     */
    public function setOnlineSalesFormUrl($online_sales_form_url) : self
    {
        if (is_null($online_sales_form_url)) {
            throw new \InvalidArgumentException('non-nullable online_sales_form_url cannot be null');
        }
        $this->container['online_sales_form_url'] = $online_sales_form_url;

        return $this;
    }

    /**
     * Gets access
     *
     * @return map[string,object]|null
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param map[string,object]|null $access Список прав. Поле будет присутствовать только если передан GET параметр my=1
     *
     * @return self
     */
    public function setAccess($access) : self
    {
        if (is_null($access)) {
            throw new \InvalidArgumentException('non-nullable access cannot be null');
        }
        $this->container['access'] = $access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }


    /**
    * Gets array presentation of the object
    *
    * @return array
    */
    public function toArray() : array
    {
        return json_decode(json_encode(ObjectSerializer::sanitizeForSerialization($this)), true);
    }

}


