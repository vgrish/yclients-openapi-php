<?php
/**
 * FinanceTransactionResponse
 *
 * @category Class
 * @package  Vgrish\YclientsOpenApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yclients
 *
 * yclients-openapi-php package for YCLIENTS generated based on the openapi schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Vgrish\YclientsOpenApi\Model;

use ArrayAccess;
use Vgrish\YclientsOpenApi\ObjectSerializer;

/**
 * FinanceTransactionResponse Class Doc Comment
 *
 * @category Class
 * @package  Vgrish\YclientsOpenApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FinanceTransactionResponse implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FinanceTransactionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'document_id' => 'int',
        'date' => '\DateTime',
        'amount' => 'float',
        'comment' => 'string',
        'last_change_date' => '\DateTime',
        'record_id' => 'int',
        'visit_id' => 'int',
        'sold_item_id' => 'int',
        'sold_item_type' => 'string',
        'expense' => 'map[string,object]',
        'master' => 'AnyOfMapArray',
        'supplier' => 'AnyOfMapArray',
        'account' => 'map[string,object]',
        'client' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'document_id' => null,
        'date' => 'date-time',
        'amount' => 'float',
        'comment' => null,
        'last_change_date' => 'date-time',
        'record_id' => null,
        'visit_id' => null,
        'sold_item_id' => null,
        'sold_item_type' => null,
        'expense' => null,
        'master' => null,
        'supplier' => null,
        'account' => null,
        'client' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'document_id' => 'document_id',
        'date' => 'date',
        'amount' => 'amount',
        'comment' => 'comment',
        'last_change_date' => 'last_change_date',
        'record_id' => 'record_id',
        'visit_id' => 'visit_id',
        'sold_item_id' => 'sold_item_id',
        'sold_item_type' => 'sold_item_type',
        'expense' => 'expense',
        'master' => 'master',
        'supplier' => 'supplier',
        'account' => 'account',
        'client' => 'client'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'document_id' => 'setDocumentId',
        'date' => 'setDate',
        'amount' => 'setAmount',
        'comment' => 'setComment',
        'last_change_date' => 'setLastChangeDate',
        'record_id' => 'setRecordId',
        'visit_id' => 'setVisitId',
        'sold_item_id' => 'setSoldItemId',
        'sold_item_type' => 'setSoldItemType',
        'expense' => 'setExpense',
        'master' => 'setMaster',
        'supplier' => 'setSupplier',
        'account' => 'setAccount',
        'client' => 'setClient'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'document_id' => 'getDocumentId',
        'date' => 'getDate',
        'amount' => 'getAmount',
        'comment' => 'getComment',
        'last_change_date' => 'getLastChangeDate',
        'record_id' => 'getRecordId',
        'visit_id' => 'getVisitId',
        'sold_item_id' => 'getSoldItemId',
        'sold_item_type' => 'getSoldItemType',
        'expense' => 'getExpense',
        'master' => 'getMaster',
        'supplier' => 'getSupplier',
        'account' => 'getAccount',
        'client' => 'getClient'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['document_id'] = isset($data['document_id']) ? $data['document_id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['last_change_date'] = isset($data['last_change_date']) ? $data['last_change_date'] : null;
        $this->container['record_id'] = isset($data['record_id']) ? $data['record_id'] : null;
        $this->container['visit_id'] = isset($data['visit_id']) ? $data['visit_id'] : null;
        $this->container['sold_item_id'] = isset($data['sold_item_id']) ? $data['sold_item_id'] : null;
        $this->container['sold_item_type'] = isset($data['sold_item_type']) ? $data['sold_item_type'] : null;
        $this->container['expense'] = isset($data['expense']) ? $data['expense'] : null;
        $this->container['master'] = isset($data['master']) ? $data['master'] : null;
        $this->container['supplier'] = isset($data['supplier']) ? $data['supplier'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['client'] = isset($data['client']) ? $data['client'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() : array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['document_id'] === null) {
            $invalidProperties[] = "'document_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid() : bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId() : int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Идентификатор транзакции
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return int
     */
    public function getDocumentId() : int
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param int $document_id Идентификатор документа
     *
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate() : ?\DateTime
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date Дата создания транзакции
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount() : ?float
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount Сумма транзакции
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment() : ?string
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Комментарий
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets last_change_date
     *
     * @return \DateTime|null
     */
    public function getLastChangeDate() : ?\DateTime
    {
        return $this->container['last_change_date'];
    }

    /**
     * Sets last_change_date
     *
     * @param \DateTime|null $last_change_date Дата последнего изменения
     *
     * @return $this
     */
    public function setLastChangeDate($last_change_date)
    {
        $this->container['last_change_date'] = $last_change_date;

        return $this;
    }

    /**
     * Gets record_id
     *
     * @return int|null
     */
    public function getRecordId() : ?int
    {
        return $this->container['record_id'];
    }

    /**
     * Sets record_id
     *
     * @param int|null $record_id Идентификатор записи
     *
     * @return $this
     */
    public function setRecordId($record_id)
    {
        $this->container['record_id'] = $record_id;

        return $this;
    }

    /**
     * Gets visit_id
     *
     * @return int|null
     */
    public function getVisitId() : ?int
    {
        return $this->container['visit_id'];
    }

    /**
     * Sets visit_id
     *
     * @param int|null $visit_id Идентификатор визита
     *
     * @return $this
     */
    public function setVisitId($visit_id)
    {
        $this->container['visit_id'] = $visit_id;

        return $this;
    }

    /**
     * Gets sold_item_id
     *
     * @return int|null
     */
    public function getSoldItemId() : ?int
    {
        return $this->container['sold_item_id'];
    }

    /**
     * Sets sold_item_id
     *
     * @param int|null $sold_item_id Идентификатор проданного товара/услуги
     *
     * @return $this
     */
    public function setSoldItemId($sold_item_id)
    {
        $this->container['sold_item_id'] = $sold_item_id;

        return $this;
    }

    /**
     * Gets sold_item_type
     *
     * @return string|null
     */
    public function getSoldItemType() : ?string
    {
        return $this->container['sold_item_type'];
    }

    /**
     * Sets sold_item_type
     *
     * @param string|null $sold_item_type Тип сущности продаджи (товар/услуга)
     *
     * @return $this
     */
    public function setSoldItemType($sold_item_type)
    {
        $this->container['sold_item_type'] = $sold_item_type;

        return $this;
    }

    /**
     * Gets expense
     *
     * @return map[string,object]|null
     */
    public function getExpense()
    {
        return $this->container['expense'];
    }

    /**
     * Sets expense
     *
     * @param map[string,object]|null $expense Тип платежа
     *
     * @return $this
     */
    public function setExpense($expense)
    {
        $this->container['expense'] = $expense;

        return $this;
    }

    /**
     * Gets master
     *
     * @return AnyOfMapArray|null
     */
    public function getMaster() : ?AnyOfMapArray
    {
        return $this->container['master'];
    }

    /**
     * Sets master
     *
     * @param AnyOfMapArray|null $master Мастер
     *
     * @return $this
     */
    public function setMaster($master)
    {
        $this->container['master'] = $master;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return AnyOfMapArray|null
     */
    public function getSupplier() : ?AnyOfMapArray
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param AnyOfMapArray|null $supplier Контрагент
     *
     * @return $this
     */
    public function setSupplier($supplier)
    {
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets account
     *
     * @return map[string,object]|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param map[string,object]|null $account Касса
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets client
     *
     * @return map[string,object]|null
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param map[string,object]|null $client Клиент
     *
     * @return $this
     */
    public function setClient($client)
    {
        $this->container['client'] = $client;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset) : mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets array presentation of the object
     *
     * @return array
     */
    public function toArray() : array
    {
        $array = [];
        foreach ($this->container as $key => $value) {
            if (is_a($value, ModelInterface::class)) {
                $array[$key] = $value->toArray();
            } else {
                $array[$key] = $value;
            }
        }
        return $array;
    }

}


