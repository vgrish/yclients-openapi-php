<?php
/**
 * LoyaltyTransactionResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Vgrish\YclientsOpenApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yclients
 *
 * yclients-openapi-php package for YCLIENTS generated based on the openapi schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Vgrish\YclientsOpenApi\Model;

use ArrayAccess;
use Vgrish\YclientsOpenApi\ObjectSerializer;

/**
 * LoyaltyTransactionResponse Class Doc Comment
 *
 * @category Class
 * @package  Vgrish\YclientsOpenApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LoyaltyTransactionResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LoyaltyTransactionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'visit_id' => 'int',
        'status_id' => 'int',
        'amount' => 'double',
        'type_id' => 'int',
        'card_id' => 'int',
        'program_id' => 'int',
        'certificate_id' => 'int',
        'abonement_id' => 'int',
        'salon_group_id' => 'int',
        'item_id' => 'int',
        'item_type_id' => 'int',
        'item_record_id' => 'int',
        'goods_transaction_id' => 'int',
        'services_transaction_id' => 'int',
        'is_discount' => 'bool',
        'is_loyalty_withdraw' => 'bool',
        'type' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'visit_id' => 'int32',
        'status_id' => 'int32',
        'amount' => 'double',
        'type_id' => 'int32',
        'card_id' => 'int32',
        'program_id' => 'int32',
        'certificate_id' => 'int32',
        'abonement_id' => 'int32',
        'salon_group_id' => 'int32',
        'item_id' => 'int32',
        'item_type_id' => 'int32',
        'item_record_id' => 'int32',
        'goods_transaction_id' => 'int32',
        'services_transaction_id' => 'int32',
        'is_discount' => null,
        'is_loyalty_withdraw' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'visit_id' => false,
        'status_id' => false,
        'amount' => false,
        'type_id' => false,
        'card_id' => false,
        'program_id' => false,
        'certificate_id' => false,
        'abonement_id' => false,
        'salon_group_id' => false,
        'item_id' => false,
        'item_type_id' => false,
        'item_record_id' => false,
        'goods_transaction_id' => false,
        'services_transaction_id' => false,
        'is_discount' => false,
        'is_loyalty_withdraw' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables() : array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull() : array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull) : void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property) : bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property) : bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'visit_id' => 'visit_id',
        'status_id' => 'status_id',
        'amount' => 'amount',
        'type_id' => 'type_id',
        'card_id' => 'card_id',
        'program_id' => 'program_id',
        'certificate_id' => 'certificate_id',
        'abonement_id' => 'abonement_id',
        'salon_group_id' => 'salon_group_id',
        'item_id' => 'item_id',
        'item_type_id' => 'item_type_id',
        'item_record_id' => 'item_record_id',
        'goods_transaction_id' => 'goods_transaction_id',
        'services_transaction_id' => 'services_transaction_id',
        'is_discount' => 'is_discount',
        'is_loyalty_withdraw' => 'is_loyalty_withdraw',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'visit_id' => 'setVisitId',
        'status_id' => 'setStatusId',
        'amount' => 'setAmount',
        'type_id' => 'setTypeId',
        'card_id' => 'setCardId',
        'program_id' => 'setProgramId',
        'certificate_id' => 'setCertificateId',
        'abonement_id' => 'setAbonementId',
        'salon_group_id' => 'setSalonGroupId',
        'item_id' => 'setItemId',
        'item_type_id' => 'setItemTypeId',
        'item_record_id' => 'setItemRecordId',
        'goods_transaction_id' => 'setGoodsTransactionId',
        'services_transaction_id' => 'setServicesTransactionId',
        'is_discount' => 'setIsDiscount',
        'is_loyalty_withdraw' => 'setIsLoyaltyWithdraw',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'visit_id' => 'getVisitId',
        'status_id' => 'getStatusId',
        'amount' => 'getAmount',
        'type_id' => 'getTypeId',
        'card_id' => 'getCardId',
        'program_id' => 'getProgramId',
        'certificate_id' => 'getCertificateId',
        'abonement_id' => 'getAbonementId',
        'salon_group_id' => 'getSalonGroupId',
        'item_id' => 'getItemId',
        'item_type_id' => 'getItemTypeId',
        'item_record_id' => 'getItemRecordId',
        'goods_transaction_id' => 'getGoodsTransactionId',
        'services_transaction_id' => 'getServicesTransactionId',
        'is_discount' => 'getIsDiscount',
        'is_loyalty_withdraw' => 'getIsLoyaltyWithdraw',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('visit_id', $data ?? [], null);
        $this->setIfExists('status_id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('type_id', $data ?? [], null);
        $this->setIfExists('card_id', $data ?? [], null);
        $this->setIfExists('program_id', $data ?? [], null);
        $this->setIfExists('certificate_id', $data ?? [], null);
        $this->setIfExists('abonement_id', $data ?? [], null);
        $this->setIfExists('salon_group_id', $data ?? [], null);
        $this->setIfExists('item_id', $data ?? [], null);
        $this->setIfExists('item_type_id', $data ?? [], null);
        $this->setIfExists('item_record_id', $data ?? [], null);
        $this->setIfExists('goods_transaction_id', $data ?? [], null);
        $this->setIfExists('services_transaction_id', $data ?? [], null);
        $this->setIfExists('is_discount', $data ?? [], null);
        $this->setIfExists('is_loyalty_withdraw', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue) : void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() : array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid() : bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId() : int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Идентификатор транзакции
     *
     * @return self
     */
    public function setId($id) : self
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets visit_id
     *
     * @return int|null
     */
    public function getVisitId() : ?int
    {
        return $this->container['visit_id'];
    }

    /**
     * Sets visit_id
     *
     * @param int|null $visit_id Идентификатор визита
     *
     * @return self
     */
    public function setVisitId($visit_id) : self
    {
        if (is_null($visit_id)) {
            throw new \InvalidArgumentException('non-nullable visit_id cannot be null');
        }
        $this->container['visit_id'] = $visit_id;

        return $this;
    }

    /**
     * Gets status_id
     *
     * @return int|null
     */
    public function getStatusId() : ?int
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param int|null $status_id Идентификатор статуса транзакции
     *
     * @return self
     */
    public function setStatusId($status_id) : self
    {
        if (is_null($status_id)) {
            throw new \InvalidArgumentException('non-nullable status_id cannot be null');
        }
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double|null
     */
    public function getAmount() : ?float
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double|null $amount Сумма оплаты лояльностью
     *
     * @return self
     */
    public function setAmount($amount) : self
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return int|null
     */
    public function getTypeId() : ?int
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param int|null $type_id Тип транзакции лояльности
     *
     * @return self
     */
    public function setTypeId($type_id) : self
    {
        if (is_null($type_id)) {
            throw new \InvalidArgumentException('non-nullable type_id cannot be null');
        }
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets card_id
     *
     * @return int|null
     */
    public function getCardId() : ?int
    {
        return $this->container['card_id'];
    }

    /**
     * Sets card_id
     *
     * @param int|null $card_id Идентификатор карты лояльности
     *
     * @return self
     */
    public function setCardId($card_id) : self
    {
        if (is_null($card_id)) {
            throw new \InvalidArgumentException('non-nullable card_id cannot be null');
        }
        $this->container['card_id'] = $card_id;

        return $this;
    }

    /**
     * Gets program_id
     *
     * @return int|null
     */
    public function getProgramId() : ?int
    {
        return $this->container['program_id'];
    }

    /**
     * Sets program_id
     *
     * @param int|null $program_id Идентификатор программы лояльности
     *
     * @return self
     */
    public function setProgramId($program_id) : self
    {
        if (is_null($program_id)) {
            throw new \InvalidArgumentException('non-nullable program_id cannot be null');
        }
        $this->container['program_id'] = $program_id;

        return $this;
    }

    /**
     * Gets certificate_id
     *
     * @return int|null
     */
    public function getCertificateId() : ?int
    {
        return $this->container['certificate_id'];
    }

    /**
     * Sets certificate_id
     *
     * @param int|null $certificate_id Идентификатор сертификата
     *
     * @return self
     */
    public function setCertificateId($certificate_id) : self
    {
        if (is_null($certificate_id)) {
            throw new \InvalidArgumentException('non-nullable certificate_id cannot be null');
        }
        $this->container['certificate_id'] = $certificate_id;

        return $this;
    }

    /**
     * Gets abonement_id
     *
     * @return int|null
     */
    public function getAbonementId() : ?int
    {
        return $this->container['abonement_id'];
    }

    /**
     * Sets abonement_id
     *
     * @param int|null $abonement_id Идентификатор абонемента
     *
     * @return self
     */
    public function setAbonementId($abonement_id) : self
    {
        if (is_null($abonement_id)) {
            throw new \InvalidArgumentException('non-nullable abonement_id cannot be null');
        }
        $this->container['abonement_id'] = $abonement_id;

        return $this;
    }

    /**
     * Gets salon_group_id
     *
     * @return int|null
     */
    public function getSalonGroupId() : ?int
    {
        return $this->container['salon_group_id'];
    }

    /**
     * Sets salon_group_id
     *
     * @param int|null $salon_group_id ID сети салонов, в рамках лояльности которой была создана данная транзакция
     *
     * @return self
     */
    public function setSalonGroupId($salon_group_id) : self
    {
        if (is_null($salon_group_id)) {
            throw new \InvalidArgumentException('non-nullable salon_group_id cannot be null');
        }
        $this->container['salon_group_id'] = $salon_group_id;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return int|null
     */
    public function getItemId() : ?int
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param int|null $item_id Идентификатор позиции в заказе, если транзакция связана с продажей товара или услуги
     *
     * @return self
     */
    public function setItemId($item_id) : self
    {
        if (is_null($item_id)) {
            throw new \InvalidArgumentException('non-nullable item_id cannot be null');
        }
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets item_type_id
     *
     * @return int|null
     */
    public function getItemTypeId() : ?int
    {
        return $this->container['item_type_id'];
    }

    /**
     * Sets item_type_id
     *
     * @param int|null $item_type_id Тип позиции в заказе, к которой относится данная транзакция (1 Оказание услуги, 7 Продажа товара), если применимо
     *
     * @return self
     */
    public function setItemTypeId($item_type_id) : self
    {
        if (is_null($item_type_id)) {
            throw new \InvalidArgumentException('non-nullable item_type_id cannot be null');
        }
        $this->container['item_type_id'] = $item_type_id;

        return $this;
    }

    /**
     * Gets item_record_id
     *
     * @return int|null
     */
    public function getItemRecordId() : ?int
    {
        return $this->container['item_record_id'];
    }

    /**
     * Sets item_record_id
     *
     * @param int|null $item_record_id ID записи к которой относится позиция в заказе, если применимо
     *
     * @return self
     */
    public function setItemRecordId($item_record_id) : self
    {
        if (is_null($item_record_id)) {
            throw new \InvalidArgumentException('non-nullable item_record_id cannot be null');
        }
        $this->container['item_record_id'] = $item_record_id;

        return $this;
    }

    /**
     * Gets goods_transaction_id
     *
     * @return int|null
     */
    public function getGoodsTransactionId() : ?int
    {
        return $this->container['goods_transaction_id'];
    }

    /**
     * Sets goods_transaction_id
     *
     * @param int|null $goods_transaction_id ID транзакции продажи товара
     *
     * @return self
     */
    public function setGoodsTransactionId($goods_transaction_id) : self
    {
        if (is_null($goods_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable goods_transaction_id cannot be null');
        }
        $this->container['goods_transaction_id'] = $goods_transaction_id;

        return $this;
    }

    /**
     * Gets services_transaction_id
     *
     * @return int|null
     */
    public function getServicesTransactionId() : ?int
    {
        return $this->container['services_transaction_id'];
    }

    /**
     * Sets services_transaction_id
     *
     * @param int|null $services_transaction_id ID транзакции оказания услуг
     *
     * @return self
     */
    public function setServicesTransactionId($services_transaction_id) : self
    {
        if (is_null($services_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable services_transaction_id cannot be null');
        }
        $this->container['services_transaction_id'] = $services_transaction_id;

        return $this;
    }

    /**
     * Gets is_discount
     *
     * @return bool|null
     */
    public function getIsDiscount() : ?bool
    {
        return $this->container['is_discount'];
    }

    /**
     * Sets is_discount
     *
     * @param bool|null $is_discount is_discount
     *
     * @return self
     */
    public function setIsDiscount($is_discount) : self
    {
        if (is_null($is_discount)) {
            throw new \InvalidArgumentException('non-nullable is_discount cannot be null');
        }
        $this->container['is_discount'] = $is_discount;

        return $this;
    }

    /**
     * Gets is_loyalty_withdraw
     *
     * @return bool|null
     */
    public function getIsLoyaltyWithdraw() : ?bool
    {
        return $this->container['is_loyalty_withdraw'];
    }

    /**
     * Sets is_loyalty_withdraw
     *
     * @param bool|null $is_loyalty_withdraw is_loyalty_withdraw
     *
     * @return self
     */
    public function setIsLoyaltyWithdraw($is_loyalty_withdraw) : self
    {
        if (is_null($is_loyalty_withdraw)) {
            throw new \InvalidArgumentException('non-nullable is_loyalty_withdraw cannot be null');
        }
        $this->container['is_loyalty_withdraw'] = $is_loyalty_withdraw;

        return $this;
    }

    /**
     * Gets type
     *
     * @return map[string,object]|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param map[string,object]|null $type type
     *
     * @return self
     */
    public function setType($type) : self
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }


    /**
    * Gets array presentation of the object
    *
    * @return array
    */
    public function toArray() : array
    {
        return json_decode(json_encode(ObjectSerializer::sanitizeForSerialization($this)), true);
    }

}


